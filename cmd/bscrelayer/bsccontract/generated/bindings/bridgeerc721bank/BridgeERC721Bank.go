// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BridgeERC721Bank

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeERC721BankABI is the input ABI used to generate the binding from.
const BridgeERC721BankABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quantiexBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"LogBridgeTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"LogNewBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"LogUnlock\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"createNewBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getDepositStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_intendedRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintBridgeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quantiexBridge\",\"outputs\":[{\"internalType\":\"contractQuantiexERC721Bridge\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"viewDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeERC721BankBin is the compiled bytecode used for deploying new contracts.
var BridgeERC721BankBin = "0x60806040523480156200001157600080fd5b5060405162003e9a38038062003e9a833981810160405260608110156200003757600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050506000600181905550600060048190555082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ff816200010860201b60201c565b5050506200014b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613d3f806200015b6000396000f3fe6080604052600436106100f35760003560e01c80637750c9f01161008a578063c905c9e711610059578063c905c9e714610b83578063e05988a414610bd6578063ebb73ca914610cc8578063f6b911bc14610dd0576100f3565b80637750c9f014610883578063889621d1146108fe578063b86247d714610ac7578063bab9acf814610b2c576100f3565b8063570ca735116100c6578063570ca7351461045d57806358c10323146104b45780635acba6551461060857806362b47f28146106e4576100f3565b80630a1f9b661461019b578063150b7a02146102a35780631deed3bb14610407578063328470ab14610432575b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613cc26022913960400191505060405180910390fd5b005b3480156101a757600080fd5b50610261600480360360208110156101be57600080fd5b81019080803590602001906401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610e4b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102af57600080fd5b506103b3600480360360808110156102c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561032d57600080fd5b82018360208201111561033f57600080fd5b8035906020019184600183028401116401000000008311171561036157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ede565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561041357600080fd5b5061041c610f03565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b50610447610f09565b6040518082815260200191505060405180910390f35b34801561046957600080fd5b50610472610f0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c057600080fd5b506104ed600480360360208110156104d757600080fd5b8101908080359060200190929190505050610f35565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105c95780820151818401526020810190506105ae565b50505050905090810190601f1680156105f65780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561061457600080fd5b506106ce6004803603602081101561062b57600080fd5b810190808035906020019064010000000081111561064857600080fd5b82018360208201111561065a57600080fd5b8035906020019184600183028401116401000000008311171561067c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f59565b6040518082815260200191505060405180910390f35b3480156106f057600080fd5b506108416004803603604081101561070757600080fd5b810190808035906020019064010000000081111561072457600080fd5b82018360208201111561073657600080fd5b8035906020019184600183028401116401000000008311171561075857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107bb57600080fd5b8201836020820111156107cd57600080fd5b803590602001918460018302840111640100000000831117156107ef57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088f57600080fd5b506108fc600480360360608110156108a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061116b565b005b34801561090a57600080fd5b50610ac5600480360360c081101561092157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561099e57600080fd5b8201836020820111156109b057600080fd5b803590602001918460018302840111640100000000831117156109d257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115610a3f57600080fd5b820183602082011115610a5157600080fd5b80359060200191846001830284011164010000000083111715610a7357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506112cb565b005b348015610ad357600080fd5b50610b1660048036036020811015610aea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611387565b6040518082815260200191505060405180910390f35b348015610b3857600080fd5b50610b4161139f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b8f57600080fd5b50610bbc60048036036020811015610ba657600080fd5b81019080803590602001909291905050506113c5565b604051808215151515815260200191505060405180910390f35b348015610be257600080fd5b50610cc660048036036060811015610bf957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610c3657600080fd5b820183602082011115610c4857600080fd5b80359060200191846001830284011164010000000083111715610c6a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506113d7565b005b348015610cd457600080fd5b50610d8e60048036036020811015610ceb57600080fd5b8101908080359060200190640100000000811115610d0857600080fd5b820183602082011115610d1a57600080fd5b80359060200191846001830284011164010000000083111715610d3c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061157f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ddc57600080fd5b50610e4960048036036060811015610df357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611612565b005b60006006826040518082805190602001908083835b60208310610e835780518252602082019150602081019050602083039250610e60565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006040518080613c46602f9139602f01905060405180910390209050949350505050565b60045481565b60015481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806060610f468661185a565b9450945094509450945091939590929450565b60006007826040518082805190602001908083835b60208310610f915780518252602082019150602081019050602083039250610f6e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16156110a757600560006006846040518082805190602001908083835b602083106110115780518252602082019150602081019050602083039250610fee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506110ac565b600090505b919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611159576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ce46027913960400191505060405180910390fd5b6111638383611a83565b905092915050565b600454600160045401116111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20617661696c61626c65206e6f6e6365732e00000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166342842e0e3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112a257600080fd5b505af11580156112b6573d6000803e3d6000fd5b505050506112c633848484611da7565b505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611371576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ce46027913960400191505060405180910390fd5b61137f8686868686866125bd565b505050505050565b60056020528060005260406000206000915090505481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006113d0826129de565b9050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461147d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ce46027913960400191505060405180910390fd5b600161148883610f59565b10156114df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526044815260200180613c026044913960600191505060405180910390fd5b60006006836040518082805190602001908083835b6020831061151757805182526020820191506020810190506020830392506114f4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061157984828585612a0b565b50505050565b60006002826040518082805190602001908083835b602083106115b75780518252602082019150602081019050602083039250611594565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6004546001600454011161168e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20617661696c61626c65206e6f6e6365732e00000000000000000000000081525060200191505060405180910390fd5b60608273ffffffffffffffffffffffffffffffffffffffff1663c87b56dd836040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156116e157600080fd5b505afa1580156116f5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561171f57600080fd5b810190808051604051939291908464010000000082111561173f57600080fd5b8382019150602082018581111561175557600080fd5b825186600182028301116401000000008211171561177257600080fd5b8083526020830192505050908051906020019080838360005b838110156117a657808201518184015260208101905061178b565b50505050905090810190601f1680156117d35780820380516001836020036101000a031916815260200191505b5060405250505090508273ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561182f57600080fd5b505af1158015611843573d6000803e3d6000fd5b50505050611854338585858561311f565b50505050565b600080600080606061186a613ae2565b600360008881526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581525050905080600001518160200151826040015183606001518460800151809050955095509550955095505091939590929450565b6000611a9a6001805461362790919063ffffffff16565b60018190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385ba726985856040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b34578082015181840152602081019050611b19565b50505050905090810190601f168015611b615780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611b9a578082015181840152602081019050611b7f565b50505050905090810190601f168015611bc75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611be857600080fd5b505af1158015611bfc573d6000803e3d6000fd5b505050506040513d6020811015611c1257600080fd5b81019080805190602001909291905050509050806002856040518082805190602001908083835b60208310611c5c5780518252602082019150602081019050602083039250611c39565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c08185604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d62578082015181840152602081019050611d47565b50505050905090810190601f168015611d8f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a18091505092915050565b611dbd600160045461362790919063ffffffff16565b60048190555060608273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611e0b57600080fd5b505afa158015611e1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611e4957600080fd5b8101908080516040519392919084640100000000821115611e6957600080fd5b83820191506020820185811115611e7f57600080fd5b8251866001820283011164010000000082111715611e9c57600080fd5b8083526020830192505050908051906020019080838360005b83811015611ed0578082015181840152602081019050611eb5565b50505050905090810190601f168015611efd5780820380516001836020036101000a031916815260200191505b50604052505050905060016007826040518082805190602001908083835b60208310611f3e5780518252602082019150602081019050602083039250611f1b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550826006826040518082805190602001908083835b60208310611fbf5780518252602082019150602081019050602083039250611f9c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506120836001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461362790919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060608373ffffffffffffffffffffffffffffffffffffffff16636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561214c57600080fd5b810190808051604051939291908464010000000082111561216c57600080fd5b8382019150602082018581111561218257600080fd5b825186600182028301116401000000008211171561219f57600080fd5b8083526020830192505050908051906020019080838360005b838110156121d35780820151818401526020810190506121b8565b50505050905090810190601f1680156122005780820380516001836020036101000a031916815260200191505b50604052505050905060608473ffffffffffffffffffffffffffffffffffffffff1663c87b56dd856040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561225c57600080fd5b505afa158015612270573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561229a57600080fd5b81019080805160405193929190846401000000008211156122ba57600080fd5b838201915060208201858111156122d057600080fd5b82518660018202830111640100000000821117156122ed57600080fd5b8083526020830192505050908051906020019080838360005b83811015612321578082015181840152602081019050612306565b50505050905090810190601f16801561234e5780820380516001836020036101000a031916815260200191505b5060405250505090507feea6a49c26051e712a5ca01abc1dd4ec359ecc0ca703921f18f5bda111a591738787878688878760045460405180806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018781526020018060200180602001868152602001858103855260078152602001807f42696e616e63650000000000000000000000000000000000000000000000000081525060200185810384528a818151815260200191508051906020019080838360005b838110156124a4578082015181840152602081019050612489565b50505050905090810190601f1680156124d15780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b8381101561250a5780820151818401526020810190506124ef565b50505050905090810190601f1680156125375780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015612570578082015181840152602081019050612555565b50505050905090810190601f16801561259d5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a150505050505050565b8373ffffffffffffffffffffffffffffffffffffffff166002846040518082805190602001908083835b6020831061260a57805182526020820191506020810190506020830392506125e7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146126ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613c9b6027913960400191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16639f6ed25f8684846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612770578082015181840152602081019050612755565b50505050905090810190601f16801561279d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156127be57600080fd5b505af11580156127d2573d6000803e3d6000fd5b505050506040513d60208110156127e857600080fd5b810190808051906020019092919050505061284e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c756026913960400191505060405180910390fd5b61285c8686868686866136af565b507facef77375267af3ad4c83b078a2e2a6cbfc7e1690b38246a9bcc6f4d631a2c168484848489604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835287818151815260200191508051906020019080838360005b83811015612931578082015181840152602081019050612916565b50505050905090810190601f16801561295e5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561299757808201518184015260208101905061297c565b50505050905090810190601f1680156129c45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a1505050505050565b60006003600083815260200190815260200160002060050160009054906101000a900460ff169050919050565b612a5e6001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139d890919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166342842e0e3086846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015612b5c57600080fd5b505af1158015612b70573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612bdc57600080fd5b505afa158015612bf0573d6000803e3d6000fd5b505050506040513d6020811015612c0657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614612ca0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f45524337323120546f6b656e207472616e73666572206661696c65640000000081525060200191505060405180910390fd5b60608373ffffffffffffffffffffffffffffffffffffffff16636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612d2657600080fd5b8101908080516040519392919084640100000000821115612d4657600080fd5b83820191506020820185811115612d5c57600080fd5b8251866001820283011164010000000082111715612d7957600080fd5b8083526020830192505050908051906020019080838360005b83811015612dad578082015181840152602081019050612d92565b50505050905090810190601f168015612dda5780820380516001836020036101000a031916815260200191505b50604052505050905060608473ffffffffffffffffffffffffffffffffffffffff1663c87b56dd846040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015612e3657600080fd5b505afa158015612e4a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612e7457600080fd5b8101908080516040519392919084640100000000821115612e9457600080fd5b83820191506020820185811115612eaa57600080fd5b8251866001820283011164010000000082111715612ec757600080fd5b8083526020830192505050908051906020019080838360005b83811015612efb578082015181840152602081019050612ee0565b50505050905090810190601f168015612f285780820380516001836020036101000a031916815260200191505b5060405250505090507f992c7ad9b6b6888761463b87f6bfb9c3bcf6d840d11ff0f30e20cef89d993019868686868686604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018581526020018060200180602001848103845288818151815260200191508051906020019080838360005b8381101561300a578082015181840152602081019050612fef565b50505050905090810190601f1680156130375780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015613070578082015181840152602081019050613055565b50505050905090810190601f16801561309d5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156130d65780820151818401526020810190506130bb565b50505050905090810190601f1680156131035780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a1505050505050565b613135600160045461362790919063ffffffff16565b60048190555060608373ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561318357600080fd5b505afa158015613197573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156131c157600080fd5b81019080805160405193929190846401000000008211156131e157600080fd5b838201915060208201858111156131f757600080fd5b825186600182028301116401000000008211171561321457600080fd5b8083526020830192505050908051906020019080838360005b8381101561324857808201518184015260208101905061322d565b50505050905090810190601f1680156132755780820380516001836020036101000a031916815260200191505b50604052505050905060608473ffffffffffffffffffffffffffffffffffffffff16636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561330457600080fd5b810190808051604051939291908464010000000082111561332457600080fd5b8382019150602082018581111561333a57600080fd5b825186600182028301116401000000008211171561335757600080fd5b8083526020830192505050908051906020019080838360005b8381101561338b578082015181840152602081019050613370565b50505050905090810190601f1680156133b85780820380516001836020036101000a031916815260200191505b5060405250505090507f0446268fca8f5695757b4fa702723c53a6419dfd4159befd5d3f2715869b8d7a8787878588868960045460405180806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018781526020018060200180602001868152602001858103855260078152602001807f42696e616e63650000000000000000000000000000000000000000000000000081525060200185810384528a818151815260200191508051906020019080838360005b8381101561350e5780820151818401526020810190506134f3565b50505050905090810190601f16801561353b5780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b83811015613574578082015181840152602081019050613559565b50505050905090810190601f1680156135a15780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156135da5780820151818401526020810190506135bf565b50505050905090810190601f1680156136075780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a150505050505050565b6000808284019050838110156136a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080878787878787604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140184805190602001908083835b6020831061378d578051825260208201915060208101905060208303925061376a565b6001836020036101000a03801982511681845116808217855250505050505090500183815260200182805190602001908083835b602083106137e457805182526020820191506020810190506020830392506137c1565b6001836020036101000a03801982511681845116808217855250505050505090500196505050505050506040516020818303038152906040528051906020012090506040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600115158152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040190805190602001906139a6929190613b5c565b5060a08201518160050160006101000a81548160ff021916908315150217905550905050809150509695505050505050565b6000613a1a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613a22565b905092915050565b6000838311158290613acf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613a94578082015181840152602081019050613a79565b50505050905090810190601f168015613ac15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613b9d57805160ff1916838001178555613bcb565b82800160010185558215613bcb579182015b82811115613bca578251825591602001919060010190613baf565b5b509050613bd89190613bdc565b5090565b613bfe91905b80821115613bfa576000816000905550600101613be2565b5090565b9056fe5468652042616e6b20646f6573206e6f7420686f6c6420656e6f756768206c6f636b656420746f6b656e7320746f2066756c66696c6c207468697320726571756573742e6f6e455243373231526563656976656428616464726573732c616464726573732c75696e743235362c627974657329417474656d70746564206d696e74206f662062726964676520746f6b656e73206661696c6564546f6b656e206d757374206265206120636f6e74726f6c6c65642062726964676520746f6b656e4d7573742062652042726964676545524337323142616e6b206f70657261746f722e416363657373207265737472696374656420746f207468652062696e616e636520627269646765a265627a7a72315820d68cc765af63b4f26f30dfba11d4741871fb05f22f51eb4a53d81baa6d72c3da64736f6c63430005110032"

// DeployBridgeERC721Bank deploys a new Ethereum contract, binding an instance of BridgeERC721Bank to it.
func DeployBridgeERC721Bank(auth *bind.TransactOpts, backend bind.ContractBackend, _operatorAddress common.Address, _quantiexBridgeAddress common.Address, _tokenFactory common.Address) (common.Address, *types.Transaction, *BridgeERC721Bank, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeERC721BankABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeERC721BankBin), backend, _operatorAddress, _quantiexBridgeAddress, _tokenFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeERC721Bank{BridgeERC721BankCaller: BridgeERC721BankCaller{contract: contract}, BridgeERC721BankTransactor: BridgeERC721BankTransactor{contract: contract}, BridgeERC721BankFilterer: BridgeERC721BankFilterer{contract: contract}}, nil
}

// BridgeERC721Bank is an auto generated Go binding around an Ethereum contract.
type BridgeERC721Bank struct {
	BridgeERC721BankCaller     // Read-only binding to the contract
	BridgeERC721BankTransactor // Write-only binding to the contract
	BridgeERC721BankFilterer   // Log filterer for contract events
}

// BridgeERC721BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeERC721BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC721BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeERC721BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC721BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeERC721BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC721BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeERC721BankSession struct {
	Contract     *BridgeERC721Bank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeERC721BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeERC721BankCallerSession struct {
	Contract *BridgeERC721BankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BridgeERC721BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeERC721BankTransactorSession struct {
	Contract     *BridgeERC721BankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BridgeERC721BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeERC721BankRaw struct {
	Contract *BridgeERC721Bank // Generic contract binding to access the raw methods on
}

// BridgeERC721BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeERC721BankCallerRaw struct {
	Contract *BridgeERC721BankCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeERC721BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeERC721BankTransactorRaw struct {
	Contract *BridgeERC721BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeERC721Bank creates a new instance of BridgeERC721Bank, bound to a specific deployed contract.
func NewBridgeERC721Bank(address common.Address, backend bind.ContractBackend) (*BridgeERC721Bank, error) {
	contract, err := bindBridgeERC721Bank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeERC721Bank{BridgeERC721BankCaller: BridgeERC721BankCaller{contract: contract}, BridgeERC721BankTransactor: BridgeERC721BankTransactor{contract: contract}, BridgeERC721BankFilterer: BridgeERC721BankFilterer{contract: contract}}, nil
}

// NewBridgeERC721BankCaller creates a new read-only instance of BridgeERC721Bank, bound to a specific deployed contract.
func NewBridgeERC721BankCaller(address common.Address, caller bind.ContractCaller) (*BridgeERC721BankCaller, error) {
	contract, err := bindBridgeERC721Bank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankCaller{contract: contract}, nil
}

// NewBridgeERC721BankTransactor creates a new write-only instance of BridgeERC721Bank, bound to a specific deployed contract.
func NewBridgeERC721BankTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeERC721BankTransactor, error) {
	contract, err := bindBridgeERC721Bank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankTransactor{contract: contract}, nil
}

// NewBridgeERC721BankFilterer creates a new log filterer instance of BridgeERC721Bank, bound to a specific deployed contract.
func NewBridgeERC721BankFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeERC721BankFilterer, error) {
	contract, err := bindBridgeERC721Bank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankFilterer{contract: contract}, nil
}

// bindBridgeERC721Bank binds a generic wrapper to an already deployed contract.
func bindBridgeERC721Bank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeERC721BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeERC721Bank *BridgeERC721BankRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeERC721Bank.Contract.BridgeERC721BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeERC721Bank *BridgeERC721BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.BridgeERC721BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeERC721Bank *BridgeERC721BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.BridgeERC721BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeERC721Bank *BridgeERC721BankCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeERC721Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeERC721Bank *BridgeERC721BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeERC721Bank *BridgeERC721BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCaller) BridgeTokenCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "bridgeTokenCount")
	return *ret0, err
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankSession) BridgeTokenCount() (*big.Int, error) {
	return _BridgeERC721Bank.Contract.BridgeTokenCount(&_BridgeERC721Bank.CallOpts)
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) BridgeTokenCount() (*big.Int, error) {
	return _BridgeERC721Bank.Contract.BridgeTokenCount(&_BridgeERC721Bank.CallOpts)
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCaller) GetBridgeToken(opts *bind.CallOpts, _symbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "getBridgeToken", _symbol)
	return *ret0, err
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankSession) GetBridgeToken(_symbol string) (common.Address, error) {
	return _BridgeERC721Bank.Contract.GetBridgeToken(&_BridgeERC721Bank.CallOpts, _symbol)
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) GetBridgeToken(_symbol string) (common.Address, error) {
	return _BridgeERC721Bank.Contract.GetBridgeToken(&_BridgeERC721Bank.CallOpts, _symbol)
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC721Bank *BridgeERC721BankCaller) GetDepositStatus(opts *bind.CallOpts, _id [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "getDepositStatus", _id)
	return *ret0, err
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC721Bank *BridgeERC721BankSession) GetDepositStatus(_id [32]byte) (bool, error) {
	return _BridgeERC721Bank.Contract.GetDepositStatus(&_BridgeERC721Bank.CallOpts, _id)
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) GetDepositStatus(_id [32]byte) (bool, error) {
	return _BridgeERC721Bank.Contract.GetDepositStatus(&_BridgeERC721Bank.CallOpts, _id)
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCaller) GetLockedFunds(opts *bind.CallOpts, _symbol string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "getLockedFunds", _symbol)
	return *ret0, err
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankSession) GetLockedFunds(_symbol string) (*big.Int, error) {
	return _BridgeERC721Bank.Contract.GetLockedFunds(&_BridgeERC721Bank.CallOpts, _symbol)
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) GetLockedFunds(_symbol string) (*big.Int, error) {
	return _BridgeERC721Bank.Contract.GetLockedFunds(&_BridgeERC721Bank.CallOpts, _symbol)
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCaller) GetLockedTokenAddress(opts *bind.CallOpts, _symbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "getLockedTokenAddress", _symbol)
	return *ret0, err
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankSession) GetLockedTokenAddress(_symbol string) (common.Address, error) {
	return _BridgeERC721Bank.Contract.GetLockedTokenAddress(&_BridgeERC721Bank.CallOpts, _symbol)
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) GetLockedTokenAddress(_symbol string) (common.Address, error) {
	return _BridgeERC721Bank.Contract.GetLockedTokenAddress(&_BridgeERC721Bank.CallOpts, _symbol)
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCaller) LockBurnNonce(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "lockBurnNonce")
	return *ret0, err
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankSession) LockBurnNonce() (*big.Int, error) {
	return _BridgeERC721Bank.Contract.LockBurnNonce(&_BridgeERC721Bank.CallOpts)
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) LockBurnNonce() (*big.Int, error) {
	return _BridgeERC721Bank.Contract.LockBurnNonce(&_BridgeERC721Bank.CallOpts)
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCaller) LockedFunds(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "lockedFunds", arg0)
	return *ret0, err
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankSession) LockedFunds(arg0 common.Address) (*big.Int, error) {
	return _BridgeERC721Bank.Contract.LockedFunds(&_BridgeERC721Bank.CallOpts, arg0)
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) LockedFunds(arg0 common.Address) (*big.Int, error) {
	return _BridgeERC721Bank.Contract.LockedFunds(&_BridgeERC721Bank.CallOpts, arg0)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "operator")
	return *ret0, err
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankSession) Operator() (common.Address, error) {
	return _BridgeERC721Bank.Contract.Operator(&_BridgeERC721Bank.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) Operator() (common.Address, error) {
	return _BridgeERC721Bank.Contract.Operator(&_BridgeERC721Bank.CallOpts)
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCaller) QuantiexBridge(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC721Bank.contract.Call(opts, out, "quantiexBridge")
	return *ret0, err
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankSession) QuantiexBridge() (common.Address, error) {
	return _BridgeERC721Bank.Contract.QuantiexBridge(&_BridgeERC721Bank.CallOpts)
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) QuantiexBridge() (common.Address, error) {
	return _BridgeERC721Bank.Contract.QuantiexBridge(&_BridgeERC721Bank.CallOpts)
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256, string)
func (_BridgeERC721Bank *BridgeERC721BankCaller) ViewDeposit(opts *bind.CallOpts, _id [32]byte) (common.Address, common.Address, common.Address, *big.Int, string, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(common.Address)
		ret2 = new(common.Address)
		ret3 = new(*big.Int)
		ret4 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _BridgeERC721Bank.contract.Call(opts, out, "viewDeposit", _id)
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256, string)
func (_BridgeERC721Bank *BridgeERC721BankSession) ViewDeposit(_id [32]byte) (common.Address, common.Address, common.Address, *big.Int, string, error) {
	return _BridgeERC721Bank.Contract.ViewDeposit(&_BridgeERC721Bank.CallOpts, _id)
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256, string)
func (_BridgeERC721Bank *BridgeERC721BankCallerSession) ViewDeposit(_id [32]byte) (common.Address, common.Address, common.Address, *big.Int, string, error) {
	return _BridgeERC721Bank.Contract.ViewDeposit(&_BridgeERC721Bank.CallOpts, _id)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactor) Burn(opts *bind.TransactOpts, _recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "burn", _recipient, _token, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankSession) Burn(_recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Burn(&_BridgeERC721Bank.TransactOpts, _recipient, _token, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) Burn(_recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Burn(&_BridgeERC721Bank.TransactOpts, _recipient, _token, _tokenId)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x62b47f28.
//
// Solidity: function createNewBridgeToken(string _symbol, string _baseURI) returns(address)
func (_BridgeERC721Bank *BridgeERC721BankTransactor) CreateNewBridgeToken(opts *bind.TransactOpts, _symbol string, _baseURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "createNewBridgeToken", _symbol, _baseURI)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x62b47f28.
//
// Solidity: function createNewBridgeToken(string _symbol, string _baseURI) returns(address)
func (_BridgeERC721Bank *BridgeERC721BankSession) CreateNewBridgeToken(_symbol string, _baseURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.CreateNewBridgeToken(&_BridgeERC721Bank.TransactOpts, _symbol, _baseURI)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x62b47f28.
//
// Solidity: function createNewBridgeToken(string _symbol, string _baseURI) returns(address)
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) CreateNewBridgeToken(_symbol string, _baseURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.CreateNewBridgeToken(&_BridgeERC721Bank.TransactOpts, _symbol, _baseURI)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactor) Lock(opts *bind.TransactOpts, _recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "lock", _recipient, _token, _tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankSession) Lock(_recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Lock(&_BridgeERC721Bank.TransactOpts, _recipient, _token, _tokenId)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) Lock(_recipient common.Address, _token common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Lock(&_BridgeERC721Bank.TransactOpts, _recipient, _token, _tokenId)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0x889621d1.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _tokenId, string _tokenURI) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactor) MintBridgeTokens(opts *bind.TransactOpts, _ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "mintBridgeTokens", _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _tokenId, _tokenURI)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0x889621d1.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _tokenId, string _tokenURI) returns()
func (_BridgeERC721Bank *BridgeERC721BankSession) MintBridgeTokens(_ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.MintBridgeTokens(&_BridgeERC721Bank.TransactOpts, _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _tokenId, _tokenURI)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0x889621d1.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _tokenId, string _tokenURI) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) MintBridgeTokens(_ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.MintBridgeTokens(&_BridgeERC721Bank.TransactOpts, _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _tokenId, _tokenURI)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_BridgeERC721Bank *BridgeERC721BankTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_BridgeERC721Bank *BridgeERC721BankSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.OnERC721Received(&_BridgeERC721Bank.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.OnERC721Received(&_BridgeERC721Bank.TransactOpts, operator, from, tokenId, data)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactor) Unlock(opts *bind.TransactOpts, _recipient common.Address, _symbol string, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.Transact(opts, "unlock", _recipient, _symbol, _tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankSession) Unlock(_recipient common.Address, _symbol string, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Unlock(&_BridgeERC721Bank.TransactOpts, _recipient, _symbol, _tokenId)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _tokenId) returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) Unlock(_recipient common.Address, _symbol string, _tokenId *big.Int) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Unlock(&_BridgeERC721Bank.TransactOpts, _recipient, _symbol, _tokenId)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC721Bank *BridgeERC721BankSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Fallback(&_BridgeERC721Bank.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC721Bank *BridgeERC721BankTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeERC721Bank.Contract.Fallback(&_BridgeERC721Bank.TransactOpts, calldata)
}

// BridgeERC721BankLogBridgeTokenMintIterator is returned from FilterLogBridgeTokenMint and is used to iterate over the raw logs and unpacked data for LogBridgeTokenMint events raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogBridgeTokenMintIterator struct {
	Event *BridgeERC721BankLogBridgeTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC721BankLogBridgeTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC721BankLogBridgeTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC721BankLogBridgeTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC721BankLogBridgeTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC721BankLogBridgeTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC721BankLogBridgeTokenMint represents a LogBridgeTokenMint event raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogBridgeTokenMint struct {
	Token       common.Address
	Symbol      string
	TokenId     *big.Int
	TokenURI    string
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogBridgeTokenMint is a free log retrieval operation binding the contract event 0xacef77375267af3ad4c83b078a2e2a6cbfc7e1690b38246a9bcc6f4d631a2c16.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _tokenId, string _tokenURI, address _beneficiary)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) FilterLogBridgeTokenMint(opts *bind.FilterOpts) (*BridgeERC721BankLogBridgeTokenMintIterator, error) {

	logs, sub, err := _BridgeERC721Bank.contract.FilterLogs(opts, "LogBridgeTokenMint")
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankLogBridgeTokenMintIterator{contract: _BridgeERC721Bank.contract, event: "LogBridgeTokenMint", logs: logs, sub: sub}, nil
}

// WatchLogBridgeTokenMint is a free log subscription operation binding the contract event 0xacef77375267af3ad4c83b078a2e2a6cbfc7e1690b38246a9bcc6f4d631a2c16.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _tokenId, string _tokenURI, address _beneficiary)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) WatchLogBridgeTokenMint(opts *bind.WatchOpts, sink chan<- *BridgeERC721BankLogBridgeTokenMint) (event.Subscription, error) {

	logs, sub, err := _BridgeERC721Bank.contract.WatchLogs(opts, "LogBridgeTokenMint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC721BankLogBridgeTokenMint)
				if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogBridgeTokenMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBridgeTokenMint is a log parse operation binding the contract event 0xacef77375267af3ad4c83b078a2e2a6cbfc7e1690b38246a9bcc6f4d631a2c16.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _tokenId, string _tokenURI, address _beneficiary)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) ParseLogBridgeTokenMint(log types.Log) (*BridgeERC721BankLogBridgeTokenMint, error) {
	event := new(BridgeERC721BankLogBridgeTokenMint)
	if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogBridgeTokenMint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC721BankLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogBurnIterator struct {
	Event *BridgeERC721BankLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC721BankLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC721BankLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC721BankLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC721BankLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC721BankLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC721BankLogBurn represents a LogBurn event raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogBurn struct {
	ChainName string
	From      common.Address
	To        common.Address
	Token     common.Address
	Symbol    string
	TokenId   *big.Int
	BaseURI   string
	TokenURI  string
	Nonce     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0x0446268fca8f5695757b4fa702723c53a6419dfd4159befd5d3f2715869b8d7a.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) FilterLogBurn(opts *bind.FilterOpts) (*BridgeERC721BankLogBurnIterator, error) {

	logs, sub, err := _BridgeERC721Bank.contract.FilterLogs(opts, "LogBurn")
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankLogBurnIterator{contract: _BridgeERC721Bank.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0x0446268fca8f5695757b4fa702723c53a6419dfd4159befd5d3f2715869b8d7a.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *BridgeERC721BankLogBurn) (event.Subscription, error) {

	logs, sub, err := _BridgeERC721Bank.contract.WatchLogs(opts, "LogBurn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC721BankLogBurn)
				if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurn is a log parse operation binding the contract event 0x0446268fca8f5695757b4fa702723c53a6419dfd4159befd5d3f2715869b8d7a.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) ParseLogBurn(log types.Log) (*BridgeERC721BankLogBurn, error) {
	event := new(BridgeERC721BankLogBurn)
	if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogBurn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC721BankLogLockIterator is returned from FilterLogLock and is used to iterate over the raw logs and unpacked data for LogLock events raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogLockIterator struct {
	Event *BridgeERC721BankLogLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC721BankLogLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC721BankLogLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC721BankLogLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC721BankLogLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC721BankLogLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC721BankLogLock represents a LogLock event raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogLock struct {
	ChainName string
	From      common.Address
	To        common.Address
	Token     common.Address
	Symbol    string
	TokenId   *big.Int
	BaseURI   string
	TokenURI  string
	Nonce     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogLock is a free log retrieval operation binding the contract event 0xeea6a49c26051e712a5ca01abc1dd4ec359ecc0ca703921f18f5bda111a59173.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) FilterLogLock(opts *bind.FilterOpts) (*BridgeERC721BankLogLockIterator, error) {

	logs, sub, err := _BridgeERC721Bank.contract.FilterLogs(opts, "LogLock")
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankLogLockIterator{contract: _BridgeERC721Bank.contract, event: "LogLock", logs: logs, sub: sub}, nil
}

// WatchLogLock is a free log subscription operation binding the contract event 0xeea6a49c26051e712a5ca01abc1dd4ec359ecc0ca703921f18f5bda111a59173.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) WatchLogLock(opts *bind.WatchOpts, sink chan<- *BridgeERC721BankLogLock) (event.Subscription, error) {

	logs, sub, err := _BridgeERC721Bank.contract.WatchLogs(opts, "LogLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC721BankLogLock)
				if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogLock is a log parse operation binding the contract event 0xeea6a49c26051e712a5ca01abc1dd4ec359ecc0ca703921f18f5bda111a59173.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, uint256 _nonce)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) ParseLogLock(log types.Log) (*BridgeERC721BankLogLock, error) {
	event := new(BridgeERC721BankLogLock)
	if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogLock", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC721BankLogNewBridgeTokenIterator is returned from FilterLogNewBridgeToken and is used to iterate over the raw logs and unpacked data for LogNewBridgeToken events raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogNewBridgeTokenIterator struct {
	Event *BridgeERC721BankLogNewBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC721BankLogNewBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC721BankLogNewBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC721BankLogNewBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC721BankLogNewBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC721BankLogNewBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC721BankLogNewBridgeToken represents a LogNewBridgeToken event raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogNewBridgeToken struct {
	Token  common.Address
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogNewBridgeToken is a free log retrieval operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) FilterLogNewBridgeToken(opts *bind.FilterOpts) (*BridgeERC721BankLogNewBridgeTokenIterator, error) {

	logs, sub, err := _BridgeERC721Bank.contract.FilterLogs(opts, "LogNewBridgeToken")
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankLogNewBridgeTokenIterator{contract: _BridgeERC721Bank.contract, event: "LogNewBridgeToken", logs: logs, sub: sub}, nil
}

// WatchLogNewBridgeToken is a free log subscription operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) WatchLogNewBridgeToken(opts *bind.WatchOpts, sink chan<- *BridgeERC721BankLogNewBridgeToken) (event.Subscription, error) {

	logs, sub, err := _BridgeERC721Bank.contract.WatchLogs(opts, "LogNewBridgeToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC721BankLogNewBridgeToken)
				if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogNewBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewBridgeToken is a log parse operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) ParseLogNewBridgeToken(log types.Log) (*BridgeERC721BankLogNewBridgeToken, error) {
	event := new(BridgeERC721BankLogNewBridgeToken)
	if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogNewBridgeToken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC721BankLogUnlockIterator is returned from FilterLogUnlock and is used to iterate over the raw logs and unpacked data for LogUnlock events raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogUnlockIterator struct {
	Event *BridgeERC721BankLogUnlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC721BankLogUnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC721BankLogUnlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC721BankLogUnlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC721BankLogUnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC721BankLogUnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC721BankLogUnlock represents a LogUnlock event raised by the BridgeERC721Bank contract.
type BridgeERC721BankLogUnlock struct {
	To       common.Address
	Token    common.Address
	Symbol   string
	TokenId  *big.Int
	BaseURI  string
	TokenURI string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogUnlock is a free log retrieval operation binding the contract event 0x992c7ad9b6b6888761463b87f6bfb9c3bcf6d840d11ff0f30e20cef89d993019.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) FilterLogUnlock(opts *bind.FilterOpts) (*BridgeERC721BankLogUnlockIterator, error) {

	logs, sub, err := _BridgeERC721Bank.contract.FilterLogs(opts, "LogUnlock")
	if err != nil {
		return nil, err
	}
	return &BridgeERC721BankLogUnlockIterator{contract: _BridgeERC721Bank.contract, event: "LogUnlock", logs: logs, sub: sub}, nil
}

// WatchLogUnlock is a free log subscription operation binding the contract event 0x992c7ad9b6b6888761463b87f6bfb9c3bcf6d840d11ff0f30e20cef89d993019.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) WatchLogUnlock(opts *bind.WatchOpts, sink chan<- *BridgeERC721BankLogUnlock) (event.Subscription, error) {

	logs, sub, err := _BridgeERC721Bank.contract.WatchLogs(opts, "LogUnlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC721BankLogUnlock)
				if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogUnlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUnlock is a log parse operation binding the contract event 0x992c7ad9b6b6888761463b87f6bfb9c3bcf6d840d11ff0f30e20cef89d993019.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI)
func (_BridgeERC721Bank *BridgeERC721BankFilterer) ParseLogUnlock(log types.Log) (*BridgeERC721BankLogUnlock, error) {
	event := new(BridgeERC721BankLogUnlock)
	if err := _BridgeERC721Bank.contract.UnpackLog(event, "LogUnlock", log); err != nil {
		return nil, err
	}
	return event, nil
}
