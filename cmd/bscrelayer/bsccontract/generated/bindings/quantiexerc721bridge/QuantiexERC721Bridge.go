// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package QuantiexERC721Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// QuantiexERC721BridgeABI is the input ABI used to generate the binding from.
const QuantiexERC721BridgeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bridgeBank\",\"type\":\"address\"}],\"name\":\"LogBridgeBankSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumQuantiexERC721Bridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ethereumSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"_binanceReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"LogNewProphecyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"LogOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumQuantiexERC721Bridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogProphecyCompleted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeBank\",\"outputs\":[{\"internalType\":\"contractBridgeERC721Bank\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"completeProphecyClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasBridgeBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"isProphecyClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"isProphecyClaimValidatorActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lockburnTxHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enumQuantiexERC721Bridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ethereumSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_binanceReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"newProphecyClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prophecyClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prophecyClaims\",\"outputs\":[{\"internalType\":\"enumQuantiexERC721Bridge.ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ethereumSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"binanceReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originalValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"internalType\":\"enumQuantiexERC721Bridge.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_bridgeERC721Bank\",\"type\":\"address\"}],\"name\":\"setBridgeBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valset\",\"outputs\":[{\"internalType\":\"contractValset\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// QuantiexERC721BridgeBin is the compiled bytecode used for deploying new contracts.
var QuantiexERC721BridgeBin = "0x60806040526040518060400160405280600581526020017f5045474759000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000168565b503480156200005f57600080fd5b506040516200362438038062003624833981810160405260408110156200008557600080fd5b810190808051906020019092919080519060200190929190505050600160058190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360146101000a81548160ff0219169083151502179055506000600460146101000a81548160ff021916908315150217905550505062000217565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ab57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001db578251825591602001919060010190620001be565b5b509050620001eb9190620001ef565b5090565b6200021491905b8082111562000210576000816000905550600101620001f6565b5090565b90565b6133fd80620002276000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637b52946f116100975780638ea5352d116100665780638ea5352d146106eb578063d8da69ea14610709578063db4237af1461074f578063fb7831f2146109cb576100f5565b80637b52946f146105405780637dc0d1d0146106135780637f54af0c1461065d578063814c92c3146106a7576100f5565b8063597dcb57116100d3578063597dcb57146101d457806369294a4e146104ac5780636b3ce98c146104ce5780637adbf973146104fc576100f5565b80630e41f373146100fa578063529f3dd214610144578063570ca7351461018a575b600080fd5b6101026109ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101706004803603602081101561015a57600080fd5b8101908080359060200190929190505050610a13565b604051808215151515815260200191505060405180910390f35b610192610b2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104aa60048036036101008110156101eb57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561025557600080fd5b82018360208201111561026757600080fd5b8035906020019184600183028401116401000000008311171561028957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001906401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184600183028401116401000000008311171561032a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561038d57600080fd5b82018360208201111561039f57600080fd5b803590602001918460018302840111640100000000831117156103c157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561042457600080fd5b82018360208201111561043657600080fd5b8035906020019184600183028401116401000000008311171561045857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b52565b005b6104b4611a48565b604051808215151515815260200191505060405180910390f35b6104fa600480360360208110156104e457600080fd5b8101908080359060200190929190505050611a5b565b005b61053e6004803603602081101561051257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d05565b005b6105f96004803603602081101561055657600080fd5b810190808035906020019064010000000081111561057357600080fd5b82018360208201111561058557600080fd5b803590602001918460018302840111640100000000831117156105a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f12565b604051808215151515815260200191505060405180910390f35b61061b611f48565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610665611f6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e9600480360360208110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f94565b005b6106f36121a1565b6040518082815260200191505060405180910390f35b6107356004803603602081101561071f57600080fd5b81019080803590602001909291905050506121a7565b604051808215151515815260200191505060405180910390f35b61077b6004803603602081101561076557600080fd5b81019080803590602001909291905050506121ed565b604051808b600281111561078b57fe5b60ff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001868152602001806020018060200185600381111561087957fe5b60ff168152602001848103845289818151815260200191508051906020019080838360005b838110156108b957808201518184015260208101905061089e565b50505050905090810190601f1680156108e65780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b8381101561091f578082015181840152602081019050610904565b50505050905090810190601f16801561094c5780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b8381101561098557808201518184015260208101905061096a565b50505050905090810190601f1680156109b25780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b6109d36124a3565b604051808215151515815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340550a1c6006600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610aea57600080fd5b505afa158015610afe573d6000803e3d6000fd5b505050506040513d6020811015610b1457600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515600360149054906101000a900460ff161515148015610b88575060011515600460149054906101000a900460ff161515145b610bdd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806132606046913960600191505060405180910390fd5b600015156007826040518082805190602001908083835b60208310610c175780518252602082019150602081019050602083039250610bf4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16151514610cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061337c6026913960400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340550a1c336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b8101908080519060200190929190505050610dfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d75737420626520616e206163746976652076616c696461746f72000000000081525060200191505060405180910390fd5b6000606060016002811115610e0d57fe5b8a6002811115610e1957fe5b14156110a8576001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635acba655896040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610eaf578082015181840152602081019050610e94565b50505050905090810190601f168015610edc5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610ef957600080fd5b505afa158015610f0d573d6000803e3d6000fd5b505050506040513d6020811015610f2357600080fd5b81019080805190602001909291905050501015610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180613342603a913960400191505060405180910390fd5b869050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a1f9b66886040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561101c578082015181840152602081019050611001565b50505050905090810190601f1680156110495780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561106657600080fd5b505afa15801561107a573d6000803e3d6000fd5b505050506040513d602081101561109057600080fd5b81019080805190602001909291905050509150611492565b6002808111156110b457fe5b8a60028111156110c057fe5b14156114405761116a60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561115f5780601f106111345761010080835404028352916020019161115f565b820191906000526020600020905b81548152906001019060200180831161114257829003601f168201915b5050505050886124b6565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ebb73ca9826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111fa5780820151818401526020810190506111df565b50505050905090810190601f1680156112275780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561124457600080fd5b505afa158015611258573d6000803e3d6000fd5b505050506040513d602081101561126e57600080fd5b81019080805190602001909291905050509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561143b57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362b47f2882876040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561134957808201518184015260208101905061132e565b50505050905090810190601f1680156113765780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156113af578082015181840152602081019050611394565b50505050905090810190601f1680156113dc5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506040513d602081101561142757600080fd5b810190808051906020019092919050505091505b611491565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061330d6035913960400191505060405180910390fd5b5b60016007846040518082805190602001908083835b602083106114ca57805182526020820191506020810190506020830392506114a7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff02191690831515021790555061152a600260055461257e90919063ffffffff16565b6005819055506040518061014001604052808b600281111561154857fe5b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001878152602001858152602001848152602001600160038111156115e257fe5b81525060066000600554815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600281111561161e57fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600401908051906020019061175b9291906130f9565b5060c0820151816005015560e08201518160060190805190602001906117829291906130f9565b506101008201518160070190805190602001906117a09291906130f9565b506101208201518160080160006101000a81548160ff021916908360038111156117c657fe5b02179055509050507f2e487b5c4495f6bd9e132fe3ba73c1a202b1746532d9f8e056626e88b995296f6005548b8b8b3387878d8c8c604051808b81526020018a600281111561181157fe5b60ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018581526020018060200180602001848103845288818151815260200191508051906020019080838360005b8381101561192b578082015181840152602081019050611910565b50505050905090810190601f1680156119585780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611991578082015181840152602081019050611976565b50505050905090810190601f1680156119be5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156119f75780820151818401526020810190506119dc565b50505050905090810190601f168015611a245780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a150505050505050505050565b600460149054906101000a900460ff1681565b80611a65816121a7565b611ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50726f706865637920636c61696d206973206e6f74206163746976650000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806133a26027913960400191505060405180910390fd5b60026006600084815260200190815260200160002060080160006101000a81548160ff02191690836003811115611bb057fe5b021790555060006006600084815260200190815260200160002060000160009054906101000a900460ff16905060016002811115611bea57fe5b816002811115611bf657fe5b1415611c0a57611c0583612606565b611c14565b611c1383612b0f565b5b7f768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a5683826006600087815260200190815260200160002060070160405180848152602001836002811115611c6357fe5b60ff16815260200180602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611cf05780601f10611cc557610100808354040283529160200191611cf0565b820191906000526020600020905b815481529060010190602001808311611cd357829003601f168201915b505094505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4d75737420626520746865206f70657261746f722e000000000000000000000081525060200191505060405180910390fd5b600360149054906101000a900460ff1615611e2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806132dc6031913960400191505060405180910390fd5b6001600360146101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612057576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4d75737420626520746865206f70657261746f722e000000000000000000000081525060200191505060405180910390fd5b600460149054906101000a900460ff16156120bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806132a66036913960400191505060405180910390fd5b6001600460146101000a81548160ff02191690831515021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60055481565b6000600160038111156121b657fe5b6006600084815260200190815260200160002060080160009054906101000a900460ff1660038111156121e557fe5b149050919050565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123445780601f1061231957610100808354040283529160200191612344565b820191906000526020600020905b81548152906001019060200180831161232757829003601f168201915b505050505090806005015490806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123e85780601f106123bd576101008083540402835291602001916123e8565b820191906000526020600020905b8154815290600101906020018083116123cb57829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124865780601f1061245b57610100808354040283529160200191612486565b820191906000526020600020905b81548152906001019060200180831161246957829003601f168201915b5050505050908060080160009054906101000a900460ff1690508a565b600360149054906101000a900460ff1681565b606082826040516020018083805190602001908083835b602083106124f057805182526020820191506020810190506020830392506124cd565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310612541578051825260208201915060208101905060208303925061251e565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6000808284019050838110156125fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b61260e613179565b60066000838152602001908152602001600020604051806101400160405290816000820160009054906101000a900460ff16600281111561264b57fe5b600281111561265657fe5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561284b5780601f106128205761010080835404028352916020019161284b565b820191906000526020600020905b81548152906001019060200180831161282e57829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128f75780601f106128cc576101008083540402835291602001916128f7565b820191906000526020600020905b8154815290600101906020018083116128da57829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129995780601f1061296e57610100808354040283529160200191612999565b820191906000526020600020905b81548152906001019060200180831161297c57829003601f168201915b505050505081526020016008820160009054906101000a900460ff1660038111156129c057fe5b60038111156129cb57fe5b815250509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e05988a482604001518360a001518460c001516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612aa5578082015181840152602081019050612a8a565b50505050905090810190601f168015612ad25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612af357600080fd5b505af1158015612b07573d6000803e3d6000fd5b505050505050565b612b17613179565b60066000838152602001908152602001600020604051806101400160405290816000820160009054906101000a900460ff166002811115612b5457fe5b6002811115612b5f57fe5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d545780601f10612d2957610100808354040283529160200191612d54565b820191906000526020600020905b815481529060010190602001808311612d3757829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e005780601f10612dd557610100808354040283529160200191612e00565b820191906000526020600020905b815481529060010190602001808311612de357829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ea25780601f10612e7757610100808354040283529160200191612ea2565b820191906000526020600020905b815481529060010190602001808311612e8557829003601f168201915b505050505081526020016008820160009054906101000a900460ff166003811115612ec957fe5b6003811115612ed457fe5b815250509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663889621d18260200151836040015184608001518560a001518660c001518760e001516040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561302557808201518184015260208101905061300a565b50505050905090810190601f1680156130525780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561308b578082015181840152602081019050613070565b50505050905090810190601f1680156130b85780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b1580156130dd57600080fd5b505af11580156130f1573d6000803e3d6000fd5b505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061313a57805160ff1916838001178555613168565b82800160010185558215613168579182015b8281111561316757825182559160200191906001019061314c565b5b509050613175919061323a565b5090565b6040518061014001604052806000600281111561319257fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001606081526020016000600381111561323457fe5b81525090565b61325c91905b80821115613258576000816000905550600101613240565b5090565b9056fe546865204f70657261746f72206d7573742073657420746865206f7261636c6520616e64206272696467652062616e6b20666f72206272696467652061637469766174696f6e546865204272696467652042616e6b2063616e6e6f742062652075706461746564206f6e636520697420686173206265656e20736574546865204f7261636c652063616e6e6f742062652075706461746564206f6e636520697420686173206265656e20736574496e76616c696420636c61696d20747970652c206f6e6c79206275726e20616e64206c6f636b2061726520737570706f727465642e4e6f7420656e6f756768206c6f636b65642061737365747320746f20636f6d706c657465207468652070726f706f7365642070726f706865637946696c74657220726564756e64616e74206c6f636b2f6275726e207472616e73616374696f6e4f6e6c7920746865204f7261636c65206d617920636f6d706c6574652070726f70686563696573a265627a7a72315820c023fd7ae9ef6d2339719705b598534376cb780ce3624a6fa74793c32650e3f064736f6c63430005110032"

// DeployQuantiexERC721Bridge deploys a new Ethereum contract, binding an instance of QuantiexERC721Bridge to it.
func DeployQuantiexERC721Bridge(auth *bind.TransactOpts, backend bind.ContractBackend, _operator common.Address, _valset common.Address) (common.Address, *types.Transaction, *QuantiexERC721Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(QuantiexERC721BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(QuantiexERC721BridgeBin), backend, _operator, _valset)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QuantiexERC721Bridge{QuantiexERC721BridgeCaller: QuantiexERC721BridgeCaller{contract: contract}, QuantiexERC721BridgeTransactor: QuantiexERC721BridgeTransactor{contract: contract}, QuantiexERC721BridgeFilterer: QuantiexERC721BridgeFilterer{contract: contract}}, nil
}

// QuantiexERC721Bridge is an auto generated Go binding around an Ethereum contract.
type QuantiexERC721Bridge struct {
	QuantiexERC721BridgeCaller     // Read-only binding to the contract
	QuantiexERC721BridgeTransactor // Write-only binding to the contract
	QuantiexERC721BridgeFilterer   // Log filterer for contract events
}

// QuantiexERC721BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type QuantiexERC721BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexERC721BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QuantiexERC721BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexERC721BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QuantiexERC721BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexERC721BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QuantiexERC721BridgeSession struct {
	Contract     *QuantiexERC721Bridge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// QuantiexERC721BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QuantiexERC721BridgeCallerSession struct {
	Contract *QuantiexERC721BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// QuantiexERC721BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QuantiexERC721BridgeTransactorSession struct {
	Contract     *QuantiexERC721BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// QuantiexERC721BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type QuantiexERC721BridgeRaw struct {
	Contract *QuantiexERC721Bridge // Generic contract binding to access the raw methods on
}

// QuantiexERC721BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QuantiexERC721BridgeCallerRaw struct {
	Contract *QuantiexERC721BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// QuantiexERC721BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QuantiexERC721BridgeTransactorRaw struct {
	Contract *QuantiexERC721BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQuantiexERC721Bridge creates a new instance of QuantiexERC721Bridge, bound to a specific deployed contract.
func NewQuantiexERC721Bridge(address common.Address, backend bind.ContractBackend) (*QuantiexERC721Bridge, error) {
	contract, err := bindQuantiexERC721Bridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721Bridge{QuantiexERC721BridgeCaller: QuantiexERC721BridgeCaller{contract: contract}, QuantiexERC721BridgeTransactor: QuantiexERC721BridgeTransactor{contract: contract}, QuantiexERC721BridgeFilterer: QuantiexERC721BridgeFilterer{contract: contract}}, nil
}

// NewQuantiexERC721BridgeCaller creates a new read-only instance of QuantiexERC721Bridge, bound to a specific deployed contract.
func NewQuantiexERC721BridgeCaller(address common.Address, caller bind.ContractCaller) (*QuantiexERC721BridgeCaller, error) {
	contract, err := bindQuantiexERC721Bridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeCaller{contract: contract}, nil
}

// NewQuantiexERC721BridgeTransactor creates a new write-only instance of QuantiexERC721Bridge, bound to a specific deployed contract.
func NewQuantiexERC721BridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*QuantiexERC721BridgeTransactor, error) {
	contract, err := bindQuantiexERC721Bridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeTransactor{contract: contract}, nil
}

// NewQuantiexERC721BridgeFilterer creates a new log filterer instance of QuantiexERC721Bridge, bound to a specific deployed contract.
func NewQuantiexERC721BridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*QuantiexERC721BridgeFilterer, error) {
	contract, err := bindQuantiexERC721Bridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeFilterer{contract: contract}, nil
}

// bindQuantiexERC721Bridge binds a generic wrapper to an already deployed contract.
func bindQuantiexERC721Bridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QuantiexERC721BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QuantiexERC721Bridge.Contract.QuantiexERC721BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.QuantiexERC721BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.QuantiexERC721BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QuantiexERC721Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.contract.Transact(opts, method, params...)
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) BridgeBank(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "bridgeBank")
	return *ret0, err
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) BridgeBank() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.BridgeBank(&_QuantiexERC721Bridge.CallOpts)
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) BridgeBank() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.BridgeBank(&_QuantiexERC721Bridge.CallOpts)
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) HasBridgeBank(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "hasBridgeBank")
	return *ret0, err
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) HasBridgeBank() (bool, error) {
	return _QuantiexERC721Bridge.Contract.HasBridgeBank(&_QuantiexERC721Bridge.CallOpts)
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) HasBridgeBank() (bool, error) {
	return _QuantiexERC721Bridge.Contract.HasBridgeBank(&_QuantiexERC721Bridge.CallOpts)
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) HasOracle(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "hasOracle")
	return *ret0, err
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) HasOracle() (bool, error) {
	return _QuantiexERC721Bridge.Contract.HasOracle(&_QuantiexERC721Bridge.CallOpts)
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) HasOracle() (bool, error) {
	return _QuantiexERC721Bridge.Contract.HasOracle(&_QuantiexERC721Bridge.CallOpts)
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) IsProphecyClaimActive(opts *bind.CallOpts, _prophecyID *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "isProphecyClaimActive", _prophecyID)
	return *ret0, err
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) IsProphecyClaimActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexERC721Bridge.Contract.IsProphecyClaimActive(&_QuantiexERC721Bridge.CallOpts, _prophecyID)
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) IsProphecyClaimActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexERC721Bridge.Contract.IsProphecyClaimActive(&_QuantiexERC721Bridge.CallOpts, _prophecyID)
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) IsProphecyClaimValidatorActive(opts *bind.CallOpts, _prophecyID *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "isProphecyClaimValidatorActive", _prophecyID)
	return *ret0, err
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) IsProphecyClaimValidatorActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexERC721Bridge.Contract.IsProphecyClaimValidatorActive(&_QuantiexERC721Bridge.CallOpts, _prophecyID)
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) IsProphecyClaimValidatorActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexERC721Bridge.Contract.IsProphecyClaimValidatorActive(&_QuantiexERC721Bridge.CallOpts, _prophecyID)
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) LockburnTxHash(opts *bind.CallOpts, arg0 string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "lockburnTxHash", arg0)
	return *ret0, err
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) LockburnTxHash(arg0 string) (bool, error) {
	return _QuantiexERC721Bridge.Contract.LockburnTxHash(&_QuantiexERC721Bridge.CallOpts, arg0)
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) LockburnTxHash(arg0 string) (bool, error) {
	return _QuantiexERC721Bridge.Contract.LockburnTxHash(&_QuantiexERC721Bridge.CallOpts, arg0)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "operator")
	return *ret0, err
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) Operator() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Operator(&_QuantiexERC721Bridge.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) Operator() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Operator(&_QuantiexERC721Bridge.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "oracle")
	return *ret0, err
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) Oracle() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Oracle(&_QuantiexERC721Bridge.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) Oracle() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Oracle(&_QuantiexERC721Bridge.CallOpts)
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) ProphecyClaimCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "prophecyClaimCount")
	return *ret0, err
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) ProphecyClaimCount() (*big.Int, error) {
	return _QuantiexERC721Bridge.Contract.ProphecyClaimCount(&_QuantiexERC721Bridge.CallOpts)
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) ProphecyClaimCount() (*big.Int, error) {
	return _QuantiexERC721Bridge.Contract.ProphecyClaimCount(&_QuantiexERC721Bridge.CallOpts)
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(uint8 claimType, address ethereumSender, address binanceReceiver, address originalValidator, address tokenAddress, string symbol, uint256 tokenId, string tokenURI, string txHash, uint8 status)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) ProphecyClaims(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ClaimType         uint8
	EthereumSender    common.Address
	BinanceReceiver   common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	TokenId           *big.Int
	TokenURI          string
	TxHash            string
	Status            uint8
}, error) {
	ret := new(struct {
		ClaimType         uint8
		EthereumSender    common.Address
		BinanceReceiver   common.Address
		OriginalValidator common.Address
		TokenAddress      common.Address
		Symbol            string
		TokenId           *big.Int
		TokenURI          string
		TxHash            string
		Status            uint8
	})
	out := ret
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "prophecyClaims", arg0)
	return *ret, err
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(uint8 claimType, address ethereumSender, address binanceReceiver, address originalValidator, address tokenAddress, string symbol, uint256 tokenId, string tokenURI, string txHash, uint8 status)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) ProphecyClaims(arg0 *big.Int) (struct {
	ClaimType         uint8
	EthereumSender    common.Address
	BinanceReceiver   common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	TokenId           *big.Int
	TokenURI          string
	TxHash            string
	Status            uint8
}, error) {
	return _QuantiexERC721Bridge.Contract.ProphecyClaims(&_QuantiexERC721Bridge.CallOpts, arg0)
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(uint8 claimType, address ethereumSender, address binanceReceiver, address originalValidator, address tokenAddress, string symbol, uint256 tokenId, string tokenURI, string txHash, uint8 status)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) ProphecyClaims(arg0 *big.Int) (struct {
	ClaimType         uint8
	EthereumSender    common.Address
	BinanceReceiver   common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	TokenId           *big.Int
	TokenURI          string
	TxHash            string
	Status            uint8
}, error) {
	return _QuantiexERC721Bridge.Contract.ProphecyClaims(&_QuantiexERC721Bridge.CallOpts, arg0)
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCaller) Valset(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexERC721Bridge.contract.Call(opts, out, "valset")
	return *ret0, err
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) Valset() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Valset(&_QuantiexERC721Bridge.CallOpts)
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeCallerSession) Valset() (common.Address, error) {
	return _QuantiexERC721Bridge.Contract.Valset(&_QuantiexERC721Bridge.CallOpts)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactor) CompleteProphecyClaim(opts *bind.TransactOpts, _prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.contract.Transact(opts, "completeProphecyClaim", _prophecyID)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) CompleteProphecyClaim(_prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.CompleteProphecyClaim(&_QuantiexERC721Bridge.TransactOpts, _prophecyID)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorSession) CompleteProphecyClaim(_prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.CompleteProphecyClaim(&_QuantiexERC721Bridge.TransactOpts, _prophecyID)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0x597dcb57.
//
// Solidity: function newProphecyClaim(uint8 _claimType, address _ethereumSender, address _binanceReceiver, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, string _txHash) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactor) NewProphecyClaim(opts *bind.TransactOpts, _claimType uint8, _ethereumSender common.Address, _binanceReceiver common.Address, _symbol string, _tokenId *big.Int, _baseURI string, _tokenURI string, _txHash string) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.contract.Transact(opts, "newProphecyClaim", _claimType, _ethereumSender, _binanceReceiver, _symbol, _tokenId, _baseURI, _tokenURI, _txHash)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0x597dcb57.
//
// Solidity: function newProphecyClaim(uint8 _claimType, address _ethereumSender, address _binanceReceiver, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, string _txHash) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) NewProphecyClaim(_claimType uint8, _ethereumSender common.Address, _binanceReceiver common.Address, _symbol string, _tokenId *big.Int, _baseURI string, _tokenURI string, _txHash string) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.NewProphecyClaim(&_QuantiexERC721Bridge.TransactOpts, _claimType, _ethereumSender, _binanceReceiver, _symbol, _tokenId, _baseURI, _tokenURI, _txHash)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0x597dcb57.
//
// Solidity: function newProphecyClaim(uint8 _claimType, address _ethereumSender, address _binanceReceiver, string _symbol, uint256 _tokenId, string _baseURI, string _tokenURI, string _txHash) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorSession) NewProphecyClaim(_claimType uint8, _ethereumSender common.Address, _binanceReceiver common.Address, _symbol string, _tokenId *big.Int, _baseURI string, _tokenURI string, _txHash string) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.NewProphecyClaim(&_QuantiexERC721Bridge.TransactOpts, _claimType, _ethereumSender, _binanceReceiver, _symbol, _tokenId, _baseURI, _tokenURI, _txHash)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeERC721Bank) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactor) SetBridgeBank(opts *bind.TransactOpts, _bridgeERC721Bank common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.contract.Transact(opts, "setBridgeBank", _bridgeERC721Bank)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeERC721Bank) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) SetBridgeBank(_bridgeERC721Bank common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.SetBridgeBank(&_QuantiexERC721Bridge.TransactOpts, _bridgeERC721Bank)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeERC721Bank) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorSession) SetBridgeBank(_bridgeERC721Bank common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.SetBridgeBank(&_QuantiexERC721Bridge.TransactOpts, _bridgeERC721Bank)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactor) SetOracle(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.contract.Transact(opts, "setOracle", _oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeSession) SetOracle(_oracle common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.SetOracle(&_QuantiexERC721Bridge.TransactOpts, _oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexERC721Bridge *QuantiexERC721BridgeTransactorSession) SetOracle(_oracle common.Address) (*types.Transaction, error) {
	return _QuantiexERC721Bridge.Contract.SetOracle(&_QuantiexERC721Bridge.TransactOpts, _oracle)
}

// QuantiexERC721BridgeLogBridgeBankSetIterator is returned from FilterLogBridgeBankSet and is used to iterate over the raw logs and unpacked data for LogBridgeBankSet events raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogBridgeBankSetIterator struct {
	Event *QuantiexERC721BridgeLogBridgeBankSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexERC721BridgeLogBridgeBankSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexERC721BridgeLogBridgeBankSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexERC721BridgeLogBridgeBankSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexERC721BridgeLogBridgeBankSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexERC721BridgeLogBridgeBankSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexERC721BridgeLogBridgeBankSet represents a LogBridgeBankSet event raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogBridgeBankSet struct {
	BridgeBank common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogBridgeBankSet is a free log retrieval operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) FilterLogBridgeBankSet(opts *bind.FilterOpts) (*QuantiexERC721BridgeLogBridgeBankSetIterator, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.FilterLogs(opts, "LogBridgeBankSet")
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeLogBridgeBankSetIterator{contract: _QuantiexERC721Bridge.contract, event: "LogBridgeBankSet", logs: logs, sub: sub}, nil
}

// WatchLogBridgeBankSet is a free log subscription operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) WatchLogBridgeBankSet(opts *bind.WatchOpts, sink chan<- *QuantiexERC721BridgeLogBridgeBankSet) (event.Subscription, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.WatchLogs(opts, "LogBridgeBankSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexERC721BridgeLogBridgeBankSet)
				if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogBridgeBankSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBridgeBankSet is a log parse operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) ParseLogBridgeBankSet(log types.Log) (*QuantiexERC721BridgeLogBridgeBankSet, error) {
	event := new(QuantiexERC721BridgeLogBridgeBankSet)
	if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogBridgeBankSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexERC721BridgeLogNewProphecyClaimIterator is returned from FilterLogNewProphecyClaim and is used to iterate over the raw logs and unpacked data for LogNewProphecyClaim events raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogNewProphecyClaimIterator struct {
	Event *QuantiexERC721BridgeLogNewProphecyClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexERC721BridgeLogNewProphecyClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexERC721BridgeLogNewProphecyClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexERC721BridgeLogNewProphecyClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexERC721BridgeLogNewProphecyClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexERC721BridgeLogNewProphecyClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexERC721BridgeLogNewProphecyClaim represents a LogNewProphecyClaim event raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogNewProphecyClaim struct {
	ProphecyID       *big.Int
	ClaimType        uint8
	EthereumSender   common.Address
	BinanceReceiver  common.Address
	ValidatorAddress common.Address
	TokenAddress     common.Address
	Symbol           string
	TokenId          *big.Int
	TokenURI         string
	TxHash           string
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLogNewProphecyClaim is a free log retrieval operation binding the contract event 0x2e487b5c4495f6bd9e132fe3ba73c1a202b1746532d9f8e056626e88b995296f.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, uint8 _claimType, address _ethereumSender, address _binanceReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _tokenId, string _tokenURI, string _txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) FilterLogNewProphecyClaim(opts *bind.FilterOpts) (*QuantiexERC721BridgeLogNewProphecyClaimIterator, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.FilterLogs(opts, "LogNewProphecyClaim")
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeLogNewProphecyClaimIterator{contract: _QuantiexERC721Bridge.contract, event: "LogNewProphecyClaim", logs: logs, sub: sub}, nil
}

// WatchLogNewProphecyClaim is a free log subscription operation binding the contract event 0x2e487b5c4495f6bd9e132fe3ba73c1a202b1746532d9f8e056626e88b995296f.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, uint8 _claimType, address _ethereumSender, address _binanceReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _tokenId, string _tokenURI, string _txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) WatchLogNewProphecyClaim(opts *bind.WatchOpts, sink chan<- *QuantiexERC721BridgeLogNewProphecyClaim) (event.Subscription, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.WatchLogs(opts, "LogNewProphecyClaim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexERC721BridgeLogNewProphecyClaim)
				if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogNewProphecyClaim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewProphecyClaim is a log parse operation binding the contract event 0x2e487b5c4495f6bd9e132fe3ba73c1a202b1746532d9f8e056626e88b995296f.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, uint8 _claimType, address _ethereumSender, address _binanceReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _tokenId, string _tokenURI, string _txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) ParseLogNewProphecyClaim(log types.Log) (*QuantiexERC721BridgeLogNewProphecyClaim, error) {
	event := new(QuantiexERC721BridgeLogNewProphecyClaim)
	if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogNewProphecyClaim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexERC721BridgeLogOracleSetIterator is returned from FilterLogOracleSet and is used to iterate over the raw logs and unpacked data for LogOracleSet events raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogOracleSetIterator struct {
	Event *QuantiexERC721BridgeLogOracleSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexERC721BridgeLogOracleSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexERC721BridgeLogOracleSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexERC721BridgeLogOracleSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexERC721BridgeLogOracleSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexERC721BridgeLogOracleSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexERC721BridgeLogOracleSet represents a LogOracleSet event raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogOracleSet struct {
	Oracle common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogOracleSet is a free log retrieval operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) FilterLogOracleSet(opts *bind.FilterOpts) (*QuantiexERC721BridgeLogOracleSetIterator, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.FilterLogs(opts, "LogOracleSet")
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeLogOracleSetIterator{contract: _QuantiexERC721Bridge.contract, event: "LogOracleSet", logs: logs, sub: sub}, nil
}

// WatchLogOracleSet is a free log subscription operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) WatchLogOracleSet(opts *bind.WatchOpts, sink chan<- *QuantiexERC721BridgeLogOracleSet) (event.Subscription, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.WatchLogs(opts, "LogOracleSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexERC721BridgeLogOracleSet)
				if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogOracleSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogOracleSet is a log parse operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) ParseLogOracleSet(log types.Log) (*QuantiexERC721BridgeLogOracleSet, error) {
	event := new(QuantiexERC721BridgeLogOracleSet)
	if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogOracleSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexERC721BridgeLogProphecyCompletedIterator is returned from FilterLogProphecyCompleted and is used to iterate over the raw logs and unpacked data for LogProphecyCompleted events raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogProphecyCompletedIterator struct {
	Event *QuantiexERC721BridgeLogProphecyCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexERC721BridgeLogProphecyCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexERC721BridgeLogProphecyCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexERC721BridgeLogProphecyCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexERC721BridgeLogProphecyCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexERC721BridgeLogProphecyCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexERC721BridgeLogProphecyCompleted represents a LogProphecyCompleted event raised by the QuantiexERC721Bridge contract.
type QuantiexERC721BridgeLogProphecyCompleted struct {
	ProphecyID *big.Int
	ClaimType  uint8
	TxHash     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogProphecyCompleted is a free log retrieval operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) FilterLogProphecyCompleted(opts *bind.FilterOpts) (*QuantiexERC721BridgeLogProphecyCompletedIterator, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.FilterLogs(opts, "LogProphecyCompleted")
	if err != nil {
		return nil, err
	}
	return &QuantiexERC721BridgeLogProphecyCompletedIterator{contract: _QuantiexERC721Bridge.contract, event: "LogProphecyCompleted", logs: logs, sub: sub}, nil
}

// WatchLogProphecyCompleted is a free log subscription operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) WatchLogProphecyCompleted(opts *bind.WatchOpts, sink chan<- *QuantiexERC721BridgeLogProphecyCompleted) (event.Subscription, error) {

	logs, sub, err := _QuantiexERC721Bridge.contract.WatchLogs(opts, "LogProphecyCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexERC721BridgeLogProphecyCompleted)
				if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogProphecyCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProphecyCompleted is a log parse operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexERC721Bridge *QuantiexERC721BridgeFilterer) ParseLogProphecyCompleted(log types.Log) (*QuantiexERC721BridgeLogProphecyCompleted, error) {
	event := new(QuantiexERC721BridgeLogProphecyCompleted)
	if err := _QuantiexERC721Bridge.contract.UnpackLog(event, "LogProphecyCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}
