// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BridgeERC20Bank

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeERC20BankABI is the input ABI used to generate the binding from.
const BridgeERC20BankABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quantiexBridgeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"LogBridgeTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"LogNewBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogUnlock\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createNewBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getDepositStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_intendedRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintBridgeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quantiexBridge\",\"outputs\":[{\"internalType\":\"contractQuantiexERC20Bridge\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"viewDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeERC20BankBin is the compiled bytecode used for deploying new contracts.
var BridgeERC20BankBin = "0x608060405234801561001057600080fd5b506040516153103803806153108339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505060008081905550600060038190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050615220806100f06000396000f3fe608060405260043610620000fe5760003560e01c80637750c9f01162000097578063e05988a41162000061578063e05988a414620007d6578063ebb73ca914620008cf578063f6b911bc14620009de578063f9e6f5541462000a5d57620000fe565b80637750c9f0146200064b578063b86247d714620006bc578063bab9acf81462000725578063c905c9e7146200077f57620000fe565b806350b06e4d11620000d957806350b06e4d1462000313578063570ca735146200042257806358c10323146200047c5780635acba655146200056857620000fe565b80630a1f9b6614620001a85780631deed3bb14620002b7578063328470ab14620002e5575b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620001a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180620051a46021913960400191505060405180910390fd5b005b348015620001b557600080fd5b506200027560048036036020811015620001ce57600080fd5b8101908080359060200190640100000000811115620001ec57600080fd5b820183602082011115620001ff57600080fd5b803590602001918460018302840111640100000000831117156200022257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000b96565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620002c457600080fd5b50620002cf62000c2b565b6040518082815260200191505060405180910390f35b348015620002f257600080fd5b50620002fd62000c31565b6040518082815260200191505060405180910390f35b3480156200032057600080fd5b50620003e0600480360360208110156200033957600080fd5b81019080803590602001906401000000008111156200035757600080fd5b8201836020820111156200036a57600080fd5b803590602001918460018302840111640100000000831117156200038d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000c37565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200042f57600080fd5b506200043a62000cf3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200048957600080fd5b50620004b960048036036020811015620004a257600080fd5b810190808035906020019092919050505062000d19565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b3480156200057557600080fd5b5062000635600480360360208110156200058e57600080fd5b8101908080359060200190640100000000811115620005ac57600080fd5b820183602082011115620005bf57600080fd5b80359060200191846001830284011164010000000083111715620005e257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000d39565b6040518082815260200191505060405180910390f35b620006ba600480360360608110156200066357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062000e97565b005b348015620006c957600080fd5b506200070f60048036036020811015620006e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620012ef565b6040518082815260200191505060405180910390f35b3480156200073257600080fd5b506200073d62001307565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200078c57600080fd5b50620007bc60048036036020811015620007a557600080fd5b81019080803590602001909291905050506200132d565b604051808215151515815260200191505060405180910390f35b348015620007e357600080fd5b50620008cd60048036036060811015620007fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156200083a57600080fd5b8201836020820111156200084d57600080fd5b803590602001918460018302840111640100000000831117156200087057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505062001341565b005b348015620008dc57600080fd5b506200099c60048036036020811015620008f557600080fd5b81019080803590602001906401000000008111156200091357600080fd5b8201836020820111156200092657600080fd5b803590602001918460018302840111640100000000831117156200094957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050620016bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620009eb57600080fd5b5062000a5b6004803603606081101562000a0457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062001751565b005b34801562000a6a57600080fd5b5062000b94600480360360a081101562000a8357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111562000b0157600080fd5b82018360208201111562000b1457600080fd5b8035906020019184600183028401116401000000008311171562000b3757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050620019d0565b005b60006005826040518082805190602001908083835b6020831062000bd0578051825260208201915060208101905060208303925062000bab565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60035481565b60005481565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180620051c56027913960400191505060405180910390fd5b62000cec8262001a8e565b9050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008062000d2a8562001cdd565b93509350935093509193509193565b60006006826040518082805190602001908083835b6020831062000d73578051825260208201915060208101905060208303925062000d4e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161562000e8d57600460006005846040518082805190602001908083835b6020831062000df6578051825260208201915060208101905060208303925062000dd1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905062000e92565b600090505b919050565b6003546001600354011162000f14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20617661696c61626c65206e6f6e6365732e00000000000000000000000081525060200191505060405180910390fd5b606060003411156200103f57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526044815260200180620050a16044913960600191505060405180910390fd5b81341462001001576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260428152602001806200505f6042913960600191505060405180910390fd5b6040518060400160405280600381526020017f424e4200000000000000000000000000000000000000000000000000000000008152509050620012da565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015620010fb57600080fd5b505af115801562001110573d6000803e3d6000fd5b505050506040513d60208110156200112757600080fd5b81019080805190602001909291905050506200118f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526044815260200180620051606044913960600191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620011d657600080fd5b505afa158015620011eb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156200121657600080fd5b81019080805160405193929190846401000000008211156200123757600080fd5b838201915060208201858111156200124e57600080fd5b82518660018202830111640100000000821117156200126c57600080fd5b8083526020830192505050908051906020019080838360005b83811015620012a257808201518184015260208101905062001285565b50505050905090810190601f168015620012d05780820380516001836020036101000a031916815260200191505b5060405250505090505b620012e9338585848662001e58565b50505050565b60046020528060005260406000206000915090505481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200133a82620021c8565b9050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620013e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180620051c56027913960400191505060405180910390fd5b80620013f58362000d39565b10156200144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018062004ff06044913960600191505060405180910390fd5b60006005836040518082805190602001908083835b6020831062001488578051825260208201915060208101905060208303925062001463565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001592576000309050828173ffffffffffffffffffffffffffffffffffffffff163110156200158b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018062005034602b913960400191505060405180910390fd5b50620016a8565b818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200161157600080fd5b505afa15801562001626573d6000803e3d6000fd5b505050506040513d60208110156200163d57600080fd5b81019080805190602001909291905050501015620016a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806200510b602e913960400191505060405180910390fd5b5b620016b684828585620021f5565b50505050565b60006001826040518082805190602001908083835b60208310620016f65780518252602082019150602081019050602083039250620016d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60035460016003540111620017ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20617661696c61626c65206e6f6e6365732e00000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156200185657600080fd5b505af11580156200186b573d6000803e3d6000fd5b5050505060608273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620018b857600080fd5b505afa158015620018cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015620018f857600080fd5b81019080805160405193929190846401000000008211156200191957600080fd5b838201915060208201858111156200193057600080fd5b82518660018202830111640100000000821117156200194e57600080fd5b8083526020830192505050908051906020019080838360005b838110156200198457808201518184015260208101905062001967565b50505050905090810190601f168015620019b25780820380516001836020036101000a031916815260200191505b506040525050509050620019ca33858584866200255e565b50505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180620051c56027913960400191505060405180910390fd5b62001a87858585858562002709565b5050505050565b600062001aa8600160005462002a5b90919063ffffffff16565b60008190555060008260405162001abf9062002e52565b8080602001828103825283818151815260200191508051906020019080838360005b8381101562001afe57808201518184015260208101905062001ae1565b50505050905090810190601f16801562001b2c5780820380516001836020036101000a031916815260200191505b5092505050604051809103906000f08015801562001b4e573d6000803e3d6000fd5b5090506000819050806001856040518082805190602001908083835b6020831062001b8f578051825260208201915060208101905060208303925062001b6a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c08185604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101562001c9757808201518184015260208101905062001c7a565b50505050905090810190601f16801562001cc55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a18092505050919050565b60008060008062001ced62002e60565b600260008781526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905080600001518160200151826040015183606001519450945094509450509193509193565b62001e70600160035462002a5b90919063ffffffff16565b60038190555060016006836040518082805190602001908083835b6020831062001eb0578051825260208201915060208101905060208303925062001e8b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550826005836040518082805190602001908083835b6020831062001f33578051825260208201915060208101905060208303925062001f0e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062001ff881600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462002a5b90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdde95e23b3044c2d6e84d94751ca3fe85887cc04a5d8b36e98994b42518d7bcc858585858560035460405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838103835260078152602001807f42696e616e636500000000000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b838110156200218057808201518184015260208101905062002163565b50505050905090810190601f168015620021ae5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15050505050565b60006002600083815260200190815260200160002060040160009054906101000a900460ff169050919050565b6200224981600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462002ae490919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562002310578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562002309573d6000803e3d6000fd5b5062002449565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200239857600080fd5b505af1158015620023ad573d6000803e3d6000fd5b505050506040513d6020811015620023c457600080fd5b810190808051906020019092919050505062002448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f455243323020546f6b656e207472616e73666572206661696c6564000000000081525060200191505060405180910390fd5b5b7f802cd873de701272ec903860b690986bd460b5bcd57e30ac1fdfdeece10528ac84848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156200251a578082015181840152602081019050620024fd565b50505050905090810190601f168015620025485780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050565b62002576600160035462002a5b90919063ffffffff16565b6003819055507f61980bee9bc85cdf2616c69ec803a7dc9b5ba43c7c2c7e3f57d240d313349861858585858560035460405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838103835260078152602001807f42696e616e636500000000000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b83811015620026c1578082015181840152602081019050620026a4565b50505050905090810190601f168015620026ef5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15050505050565b8273ffffffffffffffffffffffffffffffffffffffff166001836040518082805190602001908083835b6020831062002758578051825260208201915060208101905060208303925062002733565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200281a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180620051396027913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1985836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015620028a257600080fd5b505af1158015620028b7573d6000803e3d6000fd5b505050506040513d6020811015620028ce57600080fd5b810190808051906020019092919050505062002936576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620050e56026913960400191505060405180910390fd5b620029448585858462002b30565b507f262f97360779b7c2bb05fd24ef49f22d51435f78d3abd1ab35c323b22064cd4d83838387604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101562002a16578082015181840152602081019050620029f9565b50505050905090810190601f16801562002a445780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b60008082840190508381101562002ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600062002b2883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062002d8e565b905092915050565b60008085858585604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600115158152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b600083831115829062002e3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562002e0357808201518184015260208101905062002de6565b50505050905090810190601f16801562002e315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b61211c8062002ed483390190565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152509056fe60806040523480156200001157600080fd5b506040516200211c3803806200211c833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052505050808160126200011c620001106200017360201b60201c565b6200017b60201b60201c565b826004908051906020019062000134929190620003a0565b5081600590805190602001906200014d929190620003a0565b5080600660006101000a81548160ff021916908360ff160217905550505050506200044f565b600033905090565b62000196816003620001dc60201b620018f31790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620001ee8282620002c060201b60201c565b1562000262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000349576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180620020fa6022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e357805160ff191683800117855562000414565b8280016001018555821562000414579182015b8281111562000413578251825591602001919060010190620003f6565b5b50905062000423919062000427565b5090565b6200044c91905b80821115620004485760008160009055506001016200042e565b5090565b90565b611c9b806200045f6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a257806398650275116100715780639865027514610528578063a457c2d714610532578063a9059cbb14610598578063aa271e1a146105fe578063dd62ed3e1461065a5761010b565b806370a08231146103bb57806379cc67901461041357806395d89b4114610461578063983b2d56146104e45761010b565b8063313ce567116100de578063313ce5671461029d57806339509351146102c157806340c10f191461032757806342966c681461038d5761010b565b806306fdde0314610110578063095ea7b31461019357806318160ddd146101f957806323b872dd14610217575b600080fd5b6101186106d2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015857808201518184015260208101905061013d565b50505050905090810190601f1680156101855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101df600480360360408110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610774565b604051808215151515815260200191505060405180910390f35b610201610792565b6040518082815260200191505060405180910390f35b6102836004803603606081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061079c565b604051808215151515815260200191505060405180910390f35b6102a5610875565b604051808260ff1660ff16815260200191505060405180910390f35b61030d600480360360408110156102d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061088c565b604051808215151515815260200191505060405180910390f35b6103736004803603604081101561033d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061093f565b604051808215151515815260200191505060405180910390f35b6103b9600480360360208110156103a357600080fd5b81019080803590602001909291905050506109ba565b005b6103fd600480360360208110156103d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ce565b6040518082815260200191505060405180910390f35b61045f6004803603604081101561042957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a16565b005b610469610a24565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a957808201518184015260208101905061048e565b50505050905090810190601f1680156104d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610526600480360360208110156104fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ac6565b005b610530610b37565b005b61057e6004803603604081101561054857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b49565b604051808215151515815260200191505060405180910390f35b6105e4600480360360408110156105ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c16565b604051808215151515815260200191505060405180910390f35b6106406004803603602081101561061457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c34565b604051808215151515815260200191505060405180910390f35b6106bc6004803603604081101561067057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c51565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076a5780601f1061073f5761010080835404028352916020019161076a565b820191906000526020600020905b81548152906001019060200180831161074d57829003601f168201915b5050505050905090565b6000610788610781610cd8565b8484610ce0565b6001905092915050565b6000600254905090565b60006107a9848484610ed7565b61086a846107b5610cd8565b61086585604051806060016040528060288152602001611b6a60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061081b610cd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118d9092919063ffffffff16565b610ce0565b600190509392505050565b6000600660009054906101000a900460ff16905090565b6000610935610899610cd8565b8461093085600160006108aa610cd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124d90919063ffffffff16565b610ce0565b6001905092915050565b600061095161094c610cd8565b610c34565b6109a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180611b196030913960400191505060405180910390fd5b6109b083836112d5565b6001905092915050565b6109cb6109c5610cd8565b82611490565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a208282611648565b5050565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610abc5780601f10610a9157610100808354040283529160200191610abc565b820191906000526020600020905b815481529060010190602001808311610a9f57829003601f168201915b5050505050905090565b610ad6610ad1610cd8565b610c34565b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180611b196030913960400191505060405180910390fd5b610b3481611717565b50565b610b47610b42610cd8565b611771565b565b6000610c0c610b56610cd8565b84610c0785604051806060016040528060258152602001611c426025913960016000610b80610cd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118d9092919063ffffffff16565b610ce0565b6001905092915050565b6000610c2a610c23610cd8565b8484610ed7565b6001905092915050565b6000610c4a8260036117cb90919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180611c1e6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611ad16022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180611bf96025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611a8c6023913960400191505060405180910390fd5b61104e81604051806060016040528060268152602001611af3602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110e1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600083831115829061123a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111ff5780820151818401526020810190506111e4565b50505050905090810190601f16801561122c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808284019050838110156112cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b61138d8160025461124d90919063ffffffff16565b6002819055506113e4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611516576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611bd86021913960400191505060405180910390fd5b61158181604051806060016040528060228152602001611aaf602291396000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118d9092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d8816002546118a990919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6116528282611490565b6117138261165e610cd8565b61170e84604051806060016040528060248152602001611bb460249139600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006116c4610cd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118d9092919063ffffffff16565b610ce0565b5050565b61172b8160036118f390919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6117858160036119ce90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611b926022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006118eb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061118d565b905092915050565b6118fd82826117cb565b15611970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6119d882826117cb565b611a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611b496021913960400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365526f6c65733a206163636f756e7420697320746865207a65726f206164647265737345524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723158206cf101a156695beb63736c12310d8046102650e595da44bb707ef99c8911f25364736f6c63430005110032526f6c65733a206163636f756e7420697320746865207a65726f20616464726573735468652042616e6b20646f6573206e6f7420686f6c6420656e6f756768206c6f636b656420746f6b656e7320746f2066756c66696c6c207468697320726571756573742e496e73756666696369656e7420657468657265756d2062616c616e636520666f722064656c69766572792e546865207472616e73616374696f6e732076616c7565206d75737420626520657175616c207468652073706563696669656420616d6f756e742028696e2077656929457468657265756d206465706f736974732072657175697265207468652027746f6b656e27206164647265737320746f20626520746865206e756c6c2061646472657373417474656d70746564206d696e74206f662062726964676520746f6b656e73206661696c6564496e73756666696369656e7420455243323020746f6b656e2062616c616e636520666f722064656c69766572792e546f6b656e206d757374206265206120636f6e74726f6c6c65642062726964676520746f6b656e436f6e747261637420746f6b656e20616c6c6f77616e63657320696e73756666696369656e7420746f20636f6d706c6574652074686973206c6f636b20726571756573744d75737420626520427269646765455243323042616e6b206f70657261746f722e416363657373207265737472696374656420746f207468652062696e616e636520627269646765a265627a7a7231582009b60b4e1dbef21fa623ba9e3c10a1f691c9fdc3b8503994c95d32c75a81389664736f6c63430005110032"

// DeployBridgeERC20Bank deploys a new Ethereum contract, binding an instance of BridgeERC20Bank to it.
func DeployBridgeERC20Bank(auth *bind.TransactOpts, backend bind.ContractBackend, _operatorAddress common.Address, _quantiexBridgeAddress common.Address) (common.Address, *types.Transaction, *BridgeERC20Bank, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeERC20BankABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeERC20BankBin), backend, _operatorAddress, _quantiexBridgeAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeERC20Bank{BridgeERC20BankCaller: BridgeERC20BankCaller{contract: contract}, BridgeERC20BankTransactor: BridgeERC20BankTransactor{contract: contract}, BridgeERC20BankFilterer: BridgeERC20BankFilterer{contract: contract}}, nil
}

// BridgeERC20Bank is an auto generated Go binding around an Ethereum contract.
type BridgeERC20Bank struct {
	BridgeERC20BankCaller     // Read-only binding to the contract
	BridgeERC20BankTransactor // Write-only binding to the contract
	BridgeERC20BankFilterer   // Log filterer for contract events
}

// BridgeERC20BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeERC20BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC20BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeERC20BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC20BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeERC20BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeERC20BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeERC20BankSession struct {
	Contract     *BridgeERC20Bank  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeERC20BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeERC20BankCallerSession struct {
	Contract *BridgeERC20BankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BridgeERC20BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeERC20BankTransactorSession struct {
	Contract     *BridgeERC20BankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BridgeERC20BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeERC20BankRaw struct {
	Contract *BridgeERC20Bank // Generic contract binding to access the raw methods on
}

// BridgeERC20BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeERC20BankCallerRaw struct {
	Contract *BridgeERC20BankCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeERC20BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeERC20BankTransactorRaw struct {
	Contract *BridgeERC20BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeERC20Bank creates a new instance of BridgeERC20Bank, bound to a specific deployed contract.
func NewBridgeERC20Bank(address common.Address, backend bind.ContractBackend) (*BridgeERC20Bank, error) {
	contract, err := bindBridgeERC20Bank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20Bank{BridgeERC20BankCaller: BridgeERC20BankCaller{contract: contract}, BridgeERC20BankTransactor: BridgeERC20BankTransactor{contract: contract}, BridgeERC20BankFilterer: BridgeERC20BankFilterer{contract: contract}}, nil
}

// NewBridgeERC20BankCaller creates a new read-only instance of BridgeERC20Bank, bound to a specific deployed contract.
func NewBridgeERC20BankCaller(address common.Address, caller bind.ContractCaller) (*BridgeERC20BankCaller, error) {
	contract, err := bindBridgeERC20Bank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankCaller{contract: contract}, nil
}

// NewBridgeERC20BankTransactor creates a new write-only instance of BridgeERC20Bank, bound to a specific deployed contract.
func NewBridgeERC20BankTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeERC20BankTransactor, error) {
	contract, err := bindBridgeERC20Bank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankTransactor{contract: contract}, nil
}

// NewBridgeERC20BankFilterer creates a new log filterer instance of BridgeERC20Bank, bound to a specific deployed contract.
func NewBridgeERC20BankFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeERC20BankFilterer, error) {
	contract, err := bindBridgeERC20Bank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankFilterer{contract: contract}, nil
}

// bindBridgeERC20Bank binds a generic wrapper to an already deployed contract.
func bindBridgeERC20Bank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeERC20BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeERC20Bank *BridgeERC20BankRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeERC20Bank.Contract.BridgeERC20BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeERC20Bank *BridgeERC20BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.BridgeERC20BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeERC20Bank *BridgeERC20BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.BridgeERC20BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeERC20Bank *BridgeERC20BankCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeERC20Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeERC20Bank *BridgeERC20BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeERC20Bank *BridgeERC20BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCaller) BridgeTokenCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "bridgeTokenCount")
	return *ret0, err
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankSession) BridgeTokenCount() (*big.Int, error) {
	return _BridgeERC20Bank.Contract.BridgeTokenCount(&_BridgeERC20Bank.CallOpts)
}

// BridgeTokenCount is a free data retrieval call binding the contract method 0x328470ab.
//
// Solidity: function bridgeTokenCount() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) BridgeTokenCount() (*big.Int, error) {
	return _BridgeERC20Bank.Contract.BridgeTokenCount(&_BridgeERC20Bank.CallOpts)
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCaller) GetBridgeToken(opts *bind.CallOpts, _symbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "getBridgeToken", _symbol)
	return *ret0, err
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankSession) GetBridgeToken(_symbol string) (common.Address, error) {
	return _BridgeERC20Bank.Contract.GetBridgeToken(&_BridgeERC20Bank.CallOpts, _symbol)
}

// GetBridgeToken is a free data retrieval call binding the contract method 0xebb73ca9.
//
// Solidity: function getBridgeToken(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) GetBridgeToken(_symbol string) (common.Address, error) {
	return _BridgeERC20Bank.Contract.GetBridgeToken(&_BridgeERC20Bank.CallOpts, _symbol)
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC20Bank *BridgeERC20BankCaller) GetDepositStatus(opts *bind.CallOpts, _id [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "getDepositStatus", _id)
	return *ret0, err
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC20Bank *BridgeERC20BankSession) GetDepositStatus(_id [32]byte) (bool, error) {
	return _BridgeERC20Bank.Contract.GetDepositStatus(&_BridgeERC20Bank.CallOpts, _id)
}

// GetDepositStatus is a free data retrieval call binding the contract method 0xc905c9e7.
//
// Solidity: function getDepositStatus(bytes32 _id) view returns(bool)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) GetDepositStatus(_id [32]byte) (bool, error) {
	return _BridgeERC20Bank.Contract.GetDepositStatus(&_BridgeERC20Bank.CallOpts, _id)
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCaller) GetLockedFunds(opts *bind.CallOpts, _symbol string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "getLockedFunds", _symbol)
	return *ret0, err
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankSession) GetLockedFunds(_symbol string) (*big.Int, error) {
	return _BridgeERC20Bank.Contract.GetLockedFunds(&_BridgeERC20Bank.CallOpts, _symbol)
}

// GetLockedFunds is a free data retrieval call binding the contract method 0x5acba655.
//
// Solidity: function getLockedFunds(string _symbol) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) GetLockedFunds(_symbol string) (*big.Int, error) {
	return _BridgeERC20Bank.Contract.GetLockedFunds(&_BridgeERC20Bank.CallOpts, _symbol)
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCaller) GetLockedTokenAddress(opts *bind.CallOpts, _symbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "getLockedTokenAddress", _symbol)
	return *ret0, err
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankSession) GetLockedTokenAddress(_symbol string) (common.Address, error) {
	return _BridgeERC20Bank.Contract.GetLockedTokenAddress(&_BridgeERC20Bank.CallOpts, _symbol)
}

// GetLockedTokenAddress is a free data retrieval call binding the contract method 0x0a1f9b66.
//
// Solidity: function getLockedTokenAddress(string _symbol) view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) GetLockedTokenAddress(_symbol string) (common.Address, error) {
	return _BridgeERC20Bank.Contract.GetLockedTokenAddress(&_BridgeERC20Bank.CallOpts, _symbol)
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCaller) LockBurnNonce(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "lockBurnNonce")
	return *ret0, err
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankSession) LockBurnNonce() (*big.Int, error) {
	return _BridgeERC20Bank.Contract.LockBurnNonce(&_BridgeERC20Bank.CallOpts)
}

// LockBurnNonce is a free data retrieval call binding the contract method 0x1deed3bb.
//
// Solidity: function lockBurnNonce() view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) LockBurnNonce() (*big.Int, error) {
	return _BridgeERC20Bank.Contract.LockBurnNonce(&_BridgeERC20Bank.CallOpts)
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCaller) LockedFunds(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "lockedFunds", arg0)
	return *ret0, err
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankSession) LockedFunds(arg0 common.Address) (*big.Int, error) {
	return _BridgeERC20Bank.Contract.LockedFunds(&_BridgeERC20Bank.CallOpts, arg0)
}

// LockedFunds is a free data retrieval call binding the contract method 0xb86247d7.
//
// Solidity: function lockedFunds(address ) view returns(uint256)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) LockedFunds(arg0 common.Address) (*big.Int, error) {
	return _BridgeERC20Bank.Contract.LockedFunds(&_BridgeERC20Bank.CallOpts, arg0)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "operator")
	return *ret0, err
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankSession) Operator() (common.Address, error) {
	return _BridgeERC20Bank.Contract.Operator(&_BridgeERC20Bank.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) Operator() (common.Address, error) {
	return _BridgeERC20Bank.Contract.Operator(&_BridgeERC20Bank.CallOpts)
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCaller) QuantiexBridge(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeERC20Bank.contract.Call(opts, out, "quantiexBridge")
	return *ret0, err
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankSession) QuantiexBridge() (common.Address, error) {
	return _BridgeERC20Bank.Contract.QuantiexBridge(&_BridgeERC20Bank.CallOpts)
}

// QuantiexBridge is a free data retrieval call binding the contract method 0xbab9acf8.
//
// Solidity: function quantiexBridge() view returns(address)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) QuantiexBridge() (common.Address, error) {
	return _BridgeERC20Bank.Contract.QuantiexBridge(&_BridgeERC20Bank.CallOpts)
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256)
func (_BridgeERC20Bank *BridgeERC20BankCaller) ViewDeposit(opts *bind.CallOpts, _id [32]byte) (common.Address, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(common.Address)
		ret2 = new(common.Address)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _BridgeERC20Bank.contract.Call(opts, out, "viewDeposit", _id)
	return *ret0, *ret1, *ret2, *ret3, err
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256)
func (_BridgeERC20Bank *BridgeERC20BankSession) ViewDeposit(_id [32]byte) (common.Address, common.Address, common.Address, *big.Int, error) {
	return _BridgeERC20Bank.Contract.ViewDeposit(&_BridgeERC20Bank.CallOpts, _id)
}

// ViewDeposit is a free data retrieval call binding the contract method 0x58c10323.
//
// Solidity: function viewDeposit(bytes32 _id) view returns(address, address, address, uint256)
func (_BridgeERC20Bank *BridgeERC20BankCallerSession) ViewDeposit(_id [32]byte) (common.Address, common.Address, common.Address, *big.Int, error) {
	return _BridgeERC20Bank.Contract.ViewDeposit(&_BridgeERC20Bank.CallOpts, _id)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactor) Burn(opts *bind.TransactOpts, _recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.Transact(opts, "burn", _recipient, _token, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankSession) Burn(_recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Burn(&_BridgeERC20Bank.TransactOpts, _recipient, _token, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf6b911bc.
//
// Solidity: function burn(address _recipient, address _token, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) Burn(_recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Burn(&_BridgeERC20Bank.TransactOpts, _recipient, _token, _amount)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x50b06e4d.
//
// Solidity: function createNewBridgeToken(string _symbol) returns(address)
func (_BridgeERC20Bank *BridgeERC20BankTransactor) CreateNewBridgeToken(opts *bind.TransactOpts, _symbol string) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.Transact(opts, "createNewBridgeToken", _symbol)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x50b06e4d.
//
// Solidity: function createNewBridgeToken(string _symbol) returns(address)
func (_BridgeERC20Bank *BridgeERC20BankSession) CreateNewBridgeToken(_symbol string) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.CreateNewBridgeToken(&_BridgeERC20Bank.TransactOpts, _symbol)
}

// CreateNewBridgeToken is a paid mutator transaction binding the contract method 0x50b06e4d.
//
// Solidity: function createNewBridgeToken(string _symbol) returns(address)
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) CreateNewBridgeToken(_symbol string) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.CreateNewBridgeToken(&_BridgeERC20Bank.TransactOpts, _symbol)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _amount) payable returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactor) Lock(opts *bind.TransactOpts, _recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.Transact(opts, "lock", _recipient, _token, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _amount) payable returns()
func (_BridgeERC20Bank *BridgeERC20BankSession) Lock(_recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Lock(&_BridgeERC20Bank.TransactOpts, _recipient, _token, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x7750c9f0.
//
// Solidity: function lock(address _recipient, address _token, uint256 _amount) payable returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) Lock(_recipient common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Lock(&_BridgeERC20Bank.TransactOpts, _recipient, _token, _amount)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0xf9e6f554.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactor) MintBridgeTokens(opts *bind.TransactOpts, _ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.Transact(opts, "mintBridgeTokens", _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _amount)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0xf9e6f554.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankSession) MintBridgeTokens(_ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.MintBridgeTokens(&_BridgeERC20Bank.TransactOpts, _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _amount)
}

// MintBridgeTokens is a paid mutator transaction binding the contract method 0xf9e6f554.
//
// Solidity: function mintBridgeTokens(address _ethereumSender, address _intendedRecipient, address _bridgeTokenAddress, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) MintBridgeTokens(_ethereumSender common.Address, _intendedRecipient common.Address, _bridgeTokenAddress common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.MintBridgeTokens(&_BridgeERC20Bank.TransactOpts, _ethereumSender, _intendedRecipient, _bridgeTokenAddress, _symbol, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactor) Unlock(opts *bind.TransactOpts, _recipient common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.Transact(opts, "unlock", _recipient, _symbol, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankSession) Unlock(_recipient common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Unlock(&_BridgeERC20Bank.TransactOpts, _recipient, _symbol, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0xe05988a4.
//
// Solidity: function unlock(address _recipient, string _symbol, uint256 _amount) returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) Unlock(_recipient common.Address, _symbol string, _amount *big.Int) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Unlock(&_BridgeERC20Bank.TransactOpts, _recipient, _symbol, _amount)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BridgeERC20Bank.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC20Bank *BridgeERC20BankSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Fallback(&_BridgeERC20Bank.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeERC20Bank *BridgeERC20BankTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeERC20Bank.Contract.Fallback(&_BridgeERC20Bank.TransactOpts, calldata)
}

// BridgeERC20BankLogBridgeTokenMintIterator is returned from FilterLogBridgeTokenMint and is used to iterate over the raw logs and unpacked data for LogBridgeTokenMint events raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogBridgeTokenMintIterator struct {
	Event *BridgeERC20BankLogBridgeTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20BankLogBridgeTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20BankLogBridgeTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20BankLogBridgeTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20BankLogBridgeTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20BankLogBridgeTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20BankLogBridgeTokenMint represents a LogBridgeTokenMint event raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogBridgeTokenMint struct {
	Token       common.Address
	Symbol      string
	Amount      *big.Int
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogBridgeTokenMint is a free log retrieval operation binding the contract event 0x262f97360779b7c2bb05fd24ef49f22d51435f78d3abd1ab35c323b22064cd4d.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _amount, address _beneficiary)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) FilterLogBridgeTokenMint(opts *bind.FilterOpts) (*BridgeERC20BankLogBridgeTokenMintIterator, error) {

	logs, sub, err := _BridgeERC20Bank.contract.FilterLogs(opts, "LogBridgeTokenMint")
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankLogBridgeTokenMintIterator{contract: _BridgeERC20Bank.contract, event: "LogBridgeTokenMint", logs: logs, sub: sub}, nil
}

// WatchLogBridgeTokenMint is a free log subscription operation binding the contract event 0x262f97360779b7c2bb05fd24ef49f22d51435f78d3abd1ab35c323b22064cd4d.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _amount, address _beneficiary)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) WatchLogBridgeTokenMint(opts *bind.WatchOpts, sink chan<- *BridgeERC20BankLogBridgeTokenMint) (event.Subscription, error) {

	logs, sub, err := _BridgeERC20Bank.contract.WatchLogs(opts, "LogBridgeTokenMint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20BankLogBridgeTokenMint)
				if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogBridgeTokenMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBridgeTokenMint is a log parse operation binding the contract event 0x262f97360779b7c2bb05fd24ef49f22d51435f78d3abd1ab35c323b22064cd4d.
//
// Solidity: event LogBridgeTokenMint(address _token, string _symbol, uint256 _amount, address _beneficiary)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) ParseLogBridgeTokenMint(log types.Log) (*BridgeERC20BankLogBridgeTokenMint, error) {
	event := new(BridgeERC20BankLogBridgeTokenMint)
	if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogBridgeTokenMint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC20BankLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogBurnIterator struct {
	Event *BridgeERC20BankLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20BankLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20BankLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20BankLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20BankLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20BankLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20BankLogBurn represents a LogBurn event raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogBurn struct {
	ChainName string
	From      common.Address
	To        common.Address
	Token     common.Address
	Symbol    string
	Value     *big.Int
	Nonce     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0x61980bee9bc85cdf2616c69ec803a7dc9b5ba43c7c2c7e3f57d240d313349861.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) FilterLogBurn(opts *bind.FilterOpts) (*BridgeERC20BankLogBurnIterator, error) {

	logs, sub, err := _BridgeERC20Bank.contract.FilterLogs(opts, "LogBurn")
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankLogBurnIterator{contract: _BridgeERC20Bank.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0x61980bee9bc85cdf2616c69ec803a7dc9b5ba43c7c2c7e3f57d240d313349861.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *BridgeERC20BankLogBurn) (event.Subscription, error) {

	logs, sub, err := _BridgeERC20Bank.contract.WatchLogs(opts, "LogBurn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20BankLogBurn)
				if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurn is a log parse operation binding the contract event 0x61980bee9bc85cdf2616c69ec803a7dc9b5ba43c7c2c7e3f57d240d313349861.
//
// Solidity: event LogBurn(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) ParseLogBurn(log types.Log) (*BridgeERC20BankLogBurn, error) {
	event := new(BridgeERC20BankLogBurn)
	if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogBurn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC20BankLogLockIterator is returned from FilterLogLock and is used to iterate over the raw logs and unpacked data for LogLock events raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogLockIterator struct {
	Event *BridgeERC20BankLogLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20BankLogLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20BankLogLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20BankLogLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20BankLogLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20BankLogLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20BankLogLock represents a LogLock event raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogLock struct {
	ChainName string
	From      common.Address
	To        common.Address
	Token     common.Address
	Symbol    string
	Value     *big.Int
	Nonce     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogLock is a free log retrieval operation binding the contract event 0xdde95e23b3044c2d6e84d94751ca3fe85887cc04a5d8b36e98994b42518d7bcc.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) FilterLogLock(opts *bind.FilterOpts) (*BridgeERC20BankLogLockIterator, error) {

	logs, sub, err := _BridgeERC20Bank.contract.FilterLogs(opts, "LogLock")
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankLogLockIterator{contract: _BridgeERC20Bank.contract, event: "LogLock", logs: logs, sub: sub}, nil
}

// WatchLogLock is a free log subscription operation binding the contract event 0xdde95e23b3044c2d6e84d94751ca3fe85887cc04a5d8b36e98994b42518d7bcc.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) WatchLogLock(opts *bind.WatchOpts, sink chan<- *BridgeERC20BankLogLock) (event.Subscription, error) {

	logs, sub, err := _BridgeERC20Bank.contract.WatchLogs(opts, "LogLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20BankLogLock)
				if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogLock is a log parse operation binding the contract event 0xdde95e23b3044c2d6e84d94751ca3fe85887cc04a5d8b36e98994b42518d7bcc.
//
// Solidity: event LogLock(string _chainName, address _from, address _to, address _token, string _symbol, uint256 _value, uint256 _nonce)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) ParseLogLock(log types.Log) (*BridgeERC20BankLogLock, error) {
	event := new(BridgeERC20BankLogLock)
	if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogLock", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC20BankLogNewBridgeTokenIterator is returned from FilterLogNewBridgeToken and is used to iterate over the raw logs and unpacked data for LogNewBridgeToken events raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogNewBridgeTokenIterator struct {
	Event *BridgeERC20BankLogNewBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20BankLogNewBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20BankLogNewBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20BankLogNewBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20BankLogNewBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20BankLogNewBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20BankLogNewBridgeToken represents a LogNewBridgeToken event raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogNewBridgeToken struct {
	Token  common.Address
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogNewBridgeToken is a free log retrieval operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) FilterLogNewBridgeToken(opts *bind.FilterOpts) (*BridgeERC20BankLogNewBridgeTokenIterator, error) {

	logs, sub, err := _BridgeERC20Bank.contract.FilterLogs(opts, "LogNewBridgeToken")
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankLogNewBridgeTokenIterator{contract: _BridgeERC20Bank.contract, event: "LogNewBridgeToken", logs: logs, sub: sub}, nil
}

// WatchLogNewBridgeToken is a free log subscription operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) WatchLogNewBridgeToken(opts *bind.WatchOpts, sink chan<- *BridgeERC20BankLogNewBridgeToken) (event.Subscription, error) {

	logs, sub, err := _BridgeERC20Bank.contract.WatchLogs(opts, "LogNewBridgeToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20BankLogNewBridgeToken)
				if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogNewBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewBridgeToken is a log parse operation binding the contract event 0x0ec4ab372af15f8db6003eb14d91402a44b20dff79fbac33b4ee0df68fafe9c0.
//
// Solidity: event LogNewBridgeToken(address _token, string _symbol)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) ParseLogNewBridgeToken(log types.Log) (*BridgeERC20BankLogNewBridgeToken, error) {
	event := new(BridgeERC20BankLogNewBridgeToken)
	if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogNewBridgeToken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeERC20BankLogUnlockIterator is returned from FilterLogUnlock and is used to iterate over the raw logs and unpacked data for LogUnlock events raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogUnlockIterator struct {
	Event *BridgeERC20BankLogUnlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20BankLogUnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20BankLogUnlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20BankLogUnlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20BankLogUnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20BankLogUnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20BankLogUnlock represents a LogUnlock event raised by the BridgeERC20Bank contract.
type BridgeERC20BankLogUnlock struct {
	To     common.Address
	Token  common.Address
	Symbol string
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogUnlock is a free log retrieval operation binding the contract event 0x802cd873de701272ec903860b690986bd460b5bcd57e30ac1fdfdeece10528ac.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _value)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) FilterLogUnlock(opts *bind.FilterOpts) (*BridgeERC20BankLogUnlockIterator, error) {

	logs, sub, err := _BridgeERC20Bank.contract.FilterLogs(opts, "LogUnlock")
	if err != nil {
		return nil, err
	}
	return &BridgeERC20BankLogUnlockIterator{contract: _BridgeERC20Bank.contract, event: "LogUnlock", logs: logs, sub: sub}, nil
}

// WatchLogUnlock is a free log subscription operation binding the contract event 0x802cd873de701272ec903860b690986bd460b5bcd57e30ac1fdfdeece10528ac.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _value)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) WatchLogUnlock(opts *bind.WatchOpts, sink chan<- *BridgeERC20BankLogUnlock) (event.Subscription, error) {

	logs, sub, err := _BridgeERC20Bank.contract.WatchLogs(opts, "LogUnlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20BankLogUnlock)
				if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogUnlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUnlock is a log parse operation binding the contract event 0x802cd873de701272ec903860b690986bd460b5bcd57e30ac1fdfdeece10528ac.
//
// Solidity: event LogUnlock(address _to, address _token, string _symbol, uint256 _value)
func (_BridgeERC20Bank *BridgeERC20BankFilterer) ParseLogUnlock(log types.Log) (*BridgeERC20BankLogUnlock, error) {
	event := new(BridgeERC20BankLogUnlock)
	if err := _BridgeERC20Bank.contract.UnpackLog(event, "LogUnlock", log); err != nil {
		return nil, err
	}
	return event, nil
}
