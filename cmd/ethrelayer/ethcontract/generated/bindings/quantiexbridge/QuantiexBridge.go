// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package QuantiexBridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// QuantiexBridgeABI is the input ABI used to generate the binding from.
const QuantiexBridgeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bridgeBank\",\"type\":\"address\"}],\"name\":\"LogBridgeBankSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enumQuantiexBridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_binanceSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"addresspayable\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogNewProphecyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"LogOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumQuantiexBridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogProphecyCompleted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeBank\",\"outputs\":[{\"internalType\":\"contractBridgeBank\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"completeProphecyClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasBridgeBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"isProphecyClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prophecyID\",\"type\":\"uint256\"}],\"name\":\"isProphecyClaimValidatorActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lockburnTxHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enumQuantiexBridge.ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_binanceSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"newProphecyClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prophecyClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prophecyClaims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"enumQuantiexBridge.ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"binanceSender\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originalValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enumQuantiexBridge.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_bridgeBank\",\"type\":\"address\"}],\"name\":\"setBridgeBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valset\",\"outputs\":[{\"internalType\":\"contractValset\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// QuantiexBridgeBin is the compiled bytecode used for deploying new contracts.
var QuantiexBridgeBin = "0x60806040526040518060400160405280600581526020017f5045474759000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000168565b503480156200005f57600080fd5b506040516200375938038062003759833981810160405260408110156200008557600080fd5b810190808051906020019092919080519060200190929190505050600060058190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360146101000a81548160ff0219169083151502179055506000600460146101000a81548160ff021916908315150217905550505062000217565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ab57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001db578251825591602001919060010190620001be565b5b509050620001eb9190620001ef565b5090565b6200021491905b8082111562000210576000816000905550600101620001f6565b5090565b90565b61353280620002276000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637dc0d1d011610097578063b43aeb5211610066578063b43aeb5214610431578063d8da69ea14610671578063db4237af146106b7578063fb7831f214610933576100f5565b80637dc0d1d01461033b5780637f54af0c14610385578063814c92c3146103cf5780638ea5352d14610413576100f5565b806369294a4e116100d357806369294a4e146101d45780636b3ce98c146101f65780637adbf973146102245780637b52946f14610268576100f5565b80630e41f373146100fa578063529f3dd214610144578063570ca7351461018a575b600080fd5b610102610955565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101706004803603602081101561015a57600080fd5b810190808035906020019092919050505061097b565b604051808215151515815260200191505060405180910390f35b610192610a94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101dc610aba565b604051808215151515815260200191505060405180910390f35b6102226004803603602081101561020c57600080fd5b8101908080359060200190929190505050610acd565b005b6102666004803603602081101561023a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d77565b005b6103216004803603602081101561027e57600080fd5b810190808035906020019064010000000081111561029b57600080fd5b8201836020820111156102ad57600080fd5b803590602001918460018302840111640100000000831117156102cf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f84565b604051808215151515815260200191505060405180910390f35b610343610fba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61038d610fe0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610411600480360360208110156103e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611006565b005b61041b611213565b6040518082815260200191505060405180910390f35b61066f600480360360e081101561044757600080fd5b81019080803560ff1690602001909291908035906020019064010000000081111561047157600080fd5b82018360208201111561048357600080fd5b803590602001918460018302840111640100000000831117156104a557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561054857600080fd5b82018360208201111561055a57600080fd5b8035906020019184600183028401116401000000008311171561057c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001906401000000008111156105e957600080fd5b8201836020820111156105fb57600080fd5b8035906020019184600183028401116401000000008311171561061d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611219565b005b61069d6004803603602081101561068757600080fd5b810190808035906020019092919050505061226b565b604051808215151515815260200191505060405180910390f35b6106e3600480360360208110156106cd57600080fd5b81019080803590602001909291905050506122b1565b60405180806020018b60028111156106f757fe5b60ff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018681526020018560038111156107dd57fe5b60ff1681526020018060200184810384528e818151815260200191508051906020019080838360005b83811015610821578082015181840152602081019050610806565b50505050905090810190601f16801561084e5780820380516001836020036101000a031916815260200191505b50848103835288818151815260200191508051906020019080838360005b8381101561088757808201518184015260208101905061086c565b50505050905090810190601f1680156108b45780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156108ed5780820151818401526020810190506108d2565b50505050905090810190601f16801561091a5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b61093b612567565b604051808215151515815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340550a1c6006600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d6020811015610a7c57600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b80610ad78161226b565b610b49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50726f706865637920636c61696d206973206e6f74206163746976650000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806134d76027913960400191505060405180910390fd5b60026006600084815260200190815260200160002060070160006101000a81548160ff02191690836003811115610c2257fe5b021790555060006006600084815260200190815260200160002060010160009054906101000a900460ff16905060016002811115610c5c57fe5b816002811115610c6857fe5b1415610c7c57610c778361257a565b610c86565b610c8583612af4565b5b7f768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a5683826006600087815260200190815260200160002060080160405180848152602001836002811115610cd557fe5b60ff16815260200180602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b505094505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4d75737420626520746865206f70657261746f722e000000000000000000000081525060200191505060405180910390fd5b600360149054906101000a900460ff1615610ea0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806134116031913960400191505060405180910390fd5b6001600360146101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4d75737420626520746865206f70657261746f722e000000000000000000000081525060200191505060405180910390fd5b600460149054906101000a900460ff161561112f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806133db6036913960400191505060405180910390fd5b6001600460146101000a81548160ff02191690831515021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60055481565b60011515600360149054906101000a900460ff16151514801561124f575060011515600460149054906101000a900460ff161515145b6112a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806133956046913960600191505060405180910390fd5b600015156007826040518082805190602001908083835b602083106112de57805182526020820191506020810190506020830392506112bb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16151514611377576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134b16026913960400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340550a1c336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d602081101561144057600080fd5b81019080805190602001909291905050506114c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d75737420626520616e206163746976652076616c696461746f72000000000081525060200191505060405180910390fd5b60006060600160028111156114d457fe5b8960028111156114e057fe5b14156118485783600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631275f4188a886040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561157a57808201518184015260208101905061155f565b50505050905090810190601f1680156115a75780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156115e05780820151818401526020810190506115c5565b50505050905090810190601f16801561160d5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d602081101561165657600080fd5b810190808051906020019092919050505010156116be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180613477603a913960400191505060405180910390fd5b849050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b54e01f89876040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611754578082015181840152602081019050611739565b50505050905090810190601f1680156117815780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156117ba57808201518184015260208101905061179f565b50505050905090810190601f1680156117e75780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d602081101561183057600080fd5b81019080805190602001909291905050509150611caa565b60028081111561185457fe5b89600281111561186057fe5b1415611c585761190a60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118ff5780601f106118d4576101008083540402835291602001916118ff565b820191906000526020600020905b8154815290600101906020018083116118e257829003601f168201915b5050505050866130de565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e55d6b58a846040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156119a1578082015181840152602081019050611986565b50505050905090810190601f1680156119ce5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611a075780820151818401526020810190506119ec565b50505050905090810190601f168015611a345780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d6020811015611a7d57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c4e57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362b47f288a846040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b58578082015181840152602081019050611b3d565b50505050905090810190601f168015611b855780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611bbe578082015181840152602081019050611ba3565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611c0c57600080fd5b505af1158015611c20573d6000803e3d6000fd5b505050506040513d6020811015611c3657600080fd5b81019080805190602001909291905050509250611c52565b8092505b50611ca9565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806134426035913960400191505060405180910390fd5b5b611cb261322e565b6040518061014001604052808a81526020018b6002811115611cd057fe5b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200186815260200160016003811115611d5e57fe5b815260200185815250905060016007856040518082805190602001908083835b60208310611da15780518252602082019150602081019050602083039250611d7e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550611e0160016005546131a690919063ffffffff16565b600581905550806006600060055481526020019081526020016000206000820151816000019080519060200190611e399291906132ef565b5060208201518160010160006101000a81548160ff02191690836002811115611e5e57fe5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816005019080519060200190611f9b9291906132ef565b5060e082015181600601556101008201518160070160006101000a81548160ff02191690836003811115611fcb57fe5b0217905550610120820151816008019080519060200190611fed9291906132ef565b509050507f7a19ef4b9cf82f41c09fa0ae0802a4ddd498f6e2bec7bb6d4e523ca655f14b816005548a8c8b8b3389898d8d604051808b8152602001806020018a600281111561203857fe5b60ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018581526020018060200184810384528d818151815260200191508051906020019080838360005b8381101561214e578082015181840152602081019050612133565b50505050905090810190601f16801561217b5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b838110156121b4578082015181840152602081019050612199565b50505050905090810190601f1680156121e15780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561221a5780820151818401526020810190506121ff565b50505050905090810190601f1680156122475780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a150505050505050505050565b60006001600381111561227a57fe5b6006600084815260200190815260200160002060070160009054906101000a900460ff1660038111156122a957fe5b149050919050565b6006602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561235d5780601f106123325761010080835404028352916020019161235d565b820191906000526020600020905b81548152906001019060200180831161234057829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124a65780601f1061247b576101008083540402835291602001916124a6565b820191906000526020600020905b81548152906001019060200180831161248957829003601f168201915b5050505050908060060154908060070160009054906101000a900460ff1690806008018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561255d5780601f106125325761010080835404028352916020019161255d565b820191906000526020600020905b81548152906001019060200180831161254057829003601f168201915b505050505090508a565b600360149054906101000a900460ff1681565b61258261322e565b6006600083815260200190815260200160002060405180610140016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561263a5780601f1061260f5761010080835404028352916020019161263a565b820191906000526020600020905b81548152906001019060200180831161261d57829003601f168201915b505050505081526020016001820160009054906101000a900460ff16600281111561266157fe5b600281111561266c57fe5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128615780601f1061283657610100808354040283529160200191612861565b820191906000526020600020905b81548152906001019060200180831161284457829003601f168201915b50505050508152602001600682015481526020016007820160009054906101000a900460ff16600381111561289257fe5b600381111561289d57fe5b8152602001600882018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561293a5780601f1061290f5761010080835404028352916020019161293a565b820191906000526020600020905b81548152906001019060200180831161291d57829003601f168201915b5050505050815250509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f26e565826000015183606001518460c001518560e001516040518563ffffffff1660e01b815260040180806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b83811015612a22578082015181840152602081019050612a07565b50505050905090810190601f168015612a4f5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015612a88578082015181840152602081019050612a6d565b50505050905090810190601f168015612ab55780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015612ad857600080fd5b505af1158015612aec573d6000803e3d6000fd5b505050505050565b612afc61322e565b6006600083815260200190815260200160002060405180610140016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bb45780601f10612b8957610100808354040283529160200191612bb4565b820191906000526020600020905b815481529060010190602001808311612b9757829003601f168201915b505050505081526020016001820160009054906101000a900460ff166002811115612bdb57fe5b6002811115612be657fe5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ddb5780601f10612db057610100808354040283529160200191612ddb565b820191906000526020600020905b815481529060010190602001808311612dbe57829003601f168201915b50505050508152602001600682015481526020016007820160009054906101000a900460ff166003811115612e0c57fe5b6003811115612e1757fe5b8152602001600882018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612eb45780601f10612e8957610100808354040283529160200191612eb4565b820191906000526020600020905b815481529060010190602001808311612e9757829003601f168201915b5050505050815250509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663671a89cd8260000151836040015184606001518560a001518660c001518760e001516040518763ffffffff1660e01b815260040180806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561300a578082015181840152602081019050612fef565b50505050905090810190601f1680156130375780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015613070578082015181840152602081019050613055565b50505050905090810190601f16801561309d5780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b1580156130c257600080fd5b505af11580156130d6573d6000803e3d6000fd5b505050505050565b606082826040516020018083805190602001908083835b6020831061311857805182526020820191506020810190506020830392506130f5565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106131695780518252602082019150602081019050602083039250613146565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600080828401905083811015613224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b604051806101400160405280606081526020016000600281111561324e57fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600060038111156132e257fe5b8152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061333057805160ff191683800117855561335e565b8280016001018555821561335e579182015b8281111561335d578251825591602001919060010190613342565b5b50905061336b919061336f565b5090565b61339191905b8082111561338d576000816000905550600101613375565b5090565b9056fe546865204f70657261746f72206d7573742073657420746865206f7261636c6520616e64206272696467652062616e6b20666f72206272696467652061637469766174696f6e546865204272696467652042616e6b2063616e6e6f742062652075706461746564206f6e636520697420686173206265656e20736574546865204f7261636c652063616e6e6f742062652075706461746564206f6e636520697420686173206265656e20736574496e76616c696420636c61696d20747970652c206f6e6c79206275726e20616e64206c6f636b2061726520737570706f727465642e4e6f7420656e6f756768206c6f636b65642061737365747320746f20636f6d706c657465207468652070726f706f7365642070726f706865637946696c74657220726564756e64616e74206c6f636b2f6275726e207472616e73616374696f6e4f6e6c7920746865204f7261636c65206d617920636f6d706c6574652070726f70686563696573a265627a7a72315820d5c666546865c59c2b60978a4efd29174a344d93a6871586efb4cd2686290ca264736f6c63430005110032"

// DeployQuantiexBridge deploys a new Ethereum contract, binding an instance of QuantiexBridge to it.
func DeployQuantiexBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _operator common.Address, _valset common.Address) (common.Address, *types.Transaction, *QuantiexBridge, error) {
	parsed, err := abi.JSON(strings.NewReader(QuantiexBridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(QuantiexBridgeBin), backend, _operator, _valset)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QuantiexBridge{QuantiexBridgeCaller: QuantiexBridgeCaller{contract: contract}, QuantiexBridgeTransactor: QuantiexBridgeTransactor{contract: contract}, QuantiexBridgeFilterer: QuantiexBridgeFilterer{contract: contract}}, nil
}

// QuantiexBridge is an auto generated Go binding around an Ethereum contract.
type QuantiexBridge struct {
	QuantiexBridgeCaller     // Read-only binding to the contract
	QuantiexBridgeTransactor // Write-only binding to the contract
	QuantiexBridgeFilterer   // Log filterer for contract events
}

// QuantiexBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type QuantiexBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QuantiexBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QuantiexBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QuantiexBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QuantiexBridgeSession struct {
	Contract     *QuantiexBridge   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QuantiexBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QuantiexBridgeCallerSession struct {
	Contract *QuantiexBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// QuantiexBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QuantiexBridgeTransactorSession struct {
	Contract     *QuantiexBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// QuantiexBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type QuantiexBridgeRaw struct {
	Contract *QuantiexBridge // Generic contract binding to access the raw methods on
}

// QuantiexBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QuantiexBridgeCallerRaw struct {
	Contract *QuantiexBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// QuantiexBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QuantiexBridgeTransactorRaw struct {
	Contract *QuantiexBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQuantiexBridge creates a new instance of QuantiexBridge, bound to a specific deployed contract.
func NewQuantiexBridge(address common.Address, backend bind.ContractBackend) (*QuantiexBridge, error) {
	contract, err := bindQuantiexBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QuantiexBridge{QuantiexBridgeCaller: QuantiexBridgeCaller{contract: contract}, QuantiexBridgeTransactor: QuantiexBridgeTransactor{contract: contract}, QuantiexBridgeFilterer: QuantiexBridgeFilterer{contract: contract}}, nil
}

// NewQuantiexBridgeCaller creates a new read-only instance of QuantiexBridge, bound to a specific deployed contract.
func NewQuantiexBridgeCaller(address common.Address, caller bind.ContractCaller) (*QuantiexBridgeCaller, error) {
	contract, err := bindQuantiexBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeCaller{contract: contract}, nil
}

// NewQuantiexBridgeTransactor creates a new write-only instance of QuantiexBridge, bound to a specific deployed contract.
func NewQuantiexBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*QuantiexBridgeTransactor, error) {
	contract, err := bindQuantiexBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeTransactor{contract: contract}, nil
}

// NewQuantiexBridgeFilterer creates a new log filterer instance of QuantiexBridge, bound to a specific deployed contract.
func NewQuantiexBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*QuantiexBridgeFilterer, error) {
	contract, err := bindQuantiexBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeFilterer{contract: contract}, nil
}

// bindQuantiexBridge binds a generic wrapper to an already deployed contract.
func bindQuantiexBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QuantiexBridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QuantiexBridge *QuantiexBridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QuantiexBridge.Contract.QuantiexBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QuantiexBridge *QuantiexBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.QuantiexBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QuantiexBridge *QuantiexBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.QuantiexBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QuantiexBridge *QuantiexBridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QuantiexBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QuantiexBridge *QuantiexBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QuantiexBridge *QuantiexBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.contract.Transact(opts, method, params...)
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCaller) BridgeBank(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "bridgeBank")
	return *ret0, err
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexBridge *QuantiexBridgeSession) BridgeBank() (common.Address, error) {
	return _QuantiexBridge.Contract.BridgeBank(&_QuantiexBridge.CallOpts)
}

// BridgeBank is a free data retrieval call binding the contract method 0x0e41f373.
//
// Solidity: function bridgeBank() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCallerSession) BridgeBank() (common.Address, error) {
	return _QuantiexBridge.Contract.BridgeBank(&_QuantiexBridge.CallOpts)
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCaller) HasBridgeBank(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "hasBridgeBank")
	return *ret0, err
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeSession) HasBridgeBank() (bool, error) {
	return _QuantiexBridge.Contract.HasBridgeBank(&_QuantiexBridge.CallOpts)
}

// HasBridgeBank is a free data retrieval call binding the contract method 0x69294a4e.
//
// Solidity: function hasBridgeBank() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCallerSession) HasBridgeBank() (bool, error) {
	return _QuantiexBridge.Contract.HasBridgeBank(&_QuantiexBridge.CallOpts)
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCaller) HasOracle(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "hasOracle")
	return *ret0, err
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeSession) HasOracle() (bool, error) {
	return _QuantiexBridge.Contract.HasOracle(&_QuantiexBridge.CallOpts)
}

// HasOracle is a free data retrieval call binding the contract method 0xfb7831f2.
//
// Solidity: function hasOracle() view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCallerSession) HasOracle() (bool, error) {
	return _QuantiexBridge.Contract.HasOracle(&_QuantiexBridge.CallOpts)
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCaller) IsProphecyClaimActive(opts *bind.CallOpts, _prophecyID *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "isProphecyClaimActive", _prophecyID)
	return *ret0, err
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeSession) IsProphecyClaimActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexBridge.Contract.IsProphecyClaimActive(&_QuantiexBridge.CallOpts, _prophecyID)
}

// IsProphecyClaimActive is a free data retrieval call binding the contract method 0xd8da69ea.
//
// Solidity: function isProphecyClaimActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCallerSession) IsProphecyClaimActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexBridge.Contract.IsProphecyClaimActive(&_QuantiexBridge.CallOpts, _prophecyID)
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCaller) IsProphecyClaimValidatorActive(opts *bind.CallOpts, _prophecyID *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "isProphecyClaimValidatorActive", _prophecyID)
	return *ret0, err
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeSession) IsProphecyClaimValidatorActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexBridge.Contract.IsProphecyClaimValidatorActive(&_QuantiexBridge.CallOpts, _prophecyID)
}

// IsProphecyClaimValidatorActive is a free data retrieval call binding the contract method 0x529f3dd2.
//
// Solidity: function isProphecyClaimValidatorActive(uint256 _prophecyID) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCallerSession) IsProphecyClaimValidatorActive(_prophecyID *big.Int) (bool, error) {
	return _QuantiexBridge.Contract.IsProphecyClaimValidatorActive(&_QuantiexBridge.CallOpts, _prophecyID)
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCaller) LockburnTxHash(opts *bind.CallOpts, arg0 string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "lockburnTxHash", arg0)
	return *ret0, err
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeSession) LockburnTxHash(arg0 string) (bool, error) {
	return _QuantiexBridge.Contract.LockburnTxHash(&_QuantiexBridge.CallOpts, arg0)
}

// LockburnTxHash is a free data retrieval call binding the contract method 0x7b52946f.
//
// Solidity: function lockburnTxHash(string ) view returns(bool)
func (_QuantiexBridge *QuantiexBridgeCallerSession) LockburnTxHash(arg0 string) (bool, error) {
	return _QuantiexBridge.Contract.LockburnTxHash(&_QuantiexBridge.CallOpts, arg0)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "operator")
	return *ret0, err
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexBridge *QuantiexBridgeSession) Operator() (common.Address, error) {
	return _QuantiexBridge.Contract.Operator(&_QuantiexBridge.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCallerSession) Operator() (common.Address, error) {
	return _QuantiexBridge.Contract.Operator(&_QuantiexBridge.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "oracle")
	return *ret0, err
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexBridge *QuantiexBridgeSession) Oracle() (common.Address, error) {
	return _QuantiexBridge.Contract.Oracle(&_QuantiexBridge.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCallerSession) Oracle() (common.Address, error) {
	return _QuantiexBridge.Contract.Oracle(&_QuantiexBridge.CallOpts)
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexBridge *QuantiexBridgeCaller) ProphecyClaimCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "prophecyClaimCount")
	return *ret0, err
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexBridge *QuantiexBridgeSession) ProphecyClaimCount() (*big.Int, error) {
	return _QuantiexBridge.Contract.ProphecyClaimCount(&_QuantiexBridge.CallOpts)
}

// ProphecyClaimCount is a free data retrieval call binding the contract method 0x8ea5352d.
//
// Solidity: function prophecyClaimCount() view returns(uint256)
func (_QuantiexBridge *QuantiexBridgeCallerSession) ProphecyClaimCount() (*big.Int, error) {
	return _QuantiexBridge.Contract.ProphecyClaimCount(&_QuantiexBridge.CallOpts)
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(string chainName, uint8 claimType, address binanceSender, address ethereumReceiver, address originalValidator, address tokenAddress, string symbol, uint256 amount, uint8 status, string txHash)
func (_QuantiexBridge *QuantiexBridgeCaller) ProphecyClaims(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ChainName         string
	ClaimType         uint8
	BinanceSender     common.Address
	EthereumReceiver  common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	Amount            *big.Int
	Status            uint8
	TxHash            string
}, error) {
	ret := new(struct {
		ChainName         string
		ClaimType         uint8
		BinanceSender     common.Address
		EthereumReceiver  common.Address
		OriginalValidator common.Address
		TokenAddress      common.Address
		Symbol            string
		Amount            *big.Int
		Status            uint8
		TxHash            string
	})
	out := ret
	err := _QuantiexBridge.contract.Call(opts, out, "prophecyClaims", arg0)
	return *ret, err
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(string chainName, uint8 claimType, address binanceSender, address ethereumReceiver, address originalValidator, address tokenAddress, string symbol, uint256 amount, uint8 status, string txHash)
func (_QuantiexBridge *QuantiexBridgeSession) ProphecyClaims(arg0 *big.Int) (struct {
	ChainName         string
	ClaimType         uint8
	BinanceSender     common.Address
	EthereumReceiver  common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	Amount            *big.Int
	Status            uint8
	TxHash            string
}, error) {
	return _QuantiexBridge.Contract.ProphecyClaims(&_QuantiexBridge.CallOpts, arg0)
}

// ProphecyClaims is a free data retrieval call binding the contract method 0xdb4237af.
//
// Solidity: function prophecyClaims(uint256 ) view returns(string chainName, uint8 claimType, address binanceSender, address ethereumReceiver, address originalValidator, address tokenAddress, string symbol, uint256 amount, uint8 status, string txHash)
func (_QuantiexBridge *QuantiexBridgeCallerSession) ProphecyClaims(arg0 *big.Int) (struct {
	ChainName         string
	ClaimType         uint8
	BinanceSender     common.Address
	EthereumReceiver  common.Address
	OriginalValidator common.Address
	TokenAddress      common.Address
	Symbol            string
	Amount            *big.Int
	Status            uint8
	TxHash            string
}, error) {
	return _QuantiexBridge.Contract.ProphecyClaims(&_QuantiexBridge.CallOpts, arg0)
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCaller) Valset(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _QuantiexBridge.contract.Call(opts, out, "valset")
	return *ret0, err
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexBridge *QuantiexBridgeSession) Valset() (common.Address, error) {
	return _QuantiexBridge.Contract.Valset(&_QuantiexBridge.CallOpts)
}

// Valset is a free data retrieval call binding the contract method 0x7f54af0c.
//
// Solidity: function valset() view returns(address)
func (_QuantiexBridge *QuantiexBridgeCallerSession) Valset() (common.Address, error) {
	return _QuantiexBridge.Contract.Valset(&_QuantiexBridge.CallOpts)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexBridge *QuantiexBridgeTransactor) CompleteProphecyClaim(opts *bind.TransactOpts, _prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexBridge.contract.Transact(opts, "completeProphecyClaim", _prophecyID)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexBridge *QuantiexBridgeSession) CompleteProphecyClaim(_prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.CompleteProphecyClaim(&_QuantiexBridge.TransactOpts, _prophecyID)
}

// CompleteProphecyClaim is a paid mutator transaction binding the contract method 0x6b3ce98c.
//
// Solidity: function completeProphecyClaim(uint256 _prophecyID) returns()
func (_QuantiexBridge *QuantiexBridgeTransactorSession) CompleteProphecyClaim(_prophecyID *big.Int) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.CompleteProphecyClaim(&_QuantiexBridge.TransactOpts, _prophecyID)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0xb43aeb52.
//
// Solidity: function newProphecyClaim(uint8 _claimType, string _chainName, address _binanceSender, address _ethereumReceiver, string _symbol, uint256 _amount, string _txHash) returns()
func (_QuantiexBridge *QuantiexBridgeTransactor) NewProphecyClaim(opts *bind.TransactOpts, _claimType uint8, _chainName string, _binanceSender common.Address, _ethereumReceiver common.Address, _symbol string, _amount *big.Int, _txHash string) (*types.Transaction, error) {
	return _QuantiexBridge.contract.Transact(opts, "newProphecyClaim", _claimType, _chainName, _binanceSender, _ethereumReceiver, _symbol, _amount, _txHash)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0xb43aeb52.
//
// Solidity: function newProphecyClaim(uint8 _claimType, string _chainName, address _binanceSender, address _ethereumReceiver, string _symbol, uint256 _amount, string _txHash) returns()
func (_QuantiexBridge *QuantiexBridgeSession) NewProphecyClaim(_claimType uint8, _chainName string, _binanceSender common.Address, _ethereumReceiver common.Address, _symbol string, _amount *big.Int, _txHash string) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.NewProphecyClaim(&_QuantiexBridge.TransactOpts, _claimType, _chainName, _binanceSender, _ethereumReceiver, _symbol, _amount, _txHash)
}

// NewProphecyClaim is a paid mutator transaction binding the contract method 0xb43aeb52.
//
// Solidity: function newProphecyClaim(uint8 _claimType, string _chainName, address _binanceSender, address _ethereumReceiver, string _symbol, uint256 _amount, string _txHash) returns()
func (_QuantiexBridge *QuantiexBridgeTransactorSession) NewProphecyClaim(_claimType uint8, _chainName string, _binanceSender common.Address, _ethereumReceiver common.Address, _symbol string, _amount *big.Int, _txHash string) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.NewProphecyClaim(&_QuantiexBridge.TransactOpts, _claimType, _chainName, _binanceSender, _ethereumReceiver, _symbol, _amount, _txHash)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeBank) returns()
func (_QuantiexBridge *QuantiexBridgeTransactor) SetBridgeBank(opts *bind.TransactOpts, _bridgeBank common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.contract.Transact(opts, "setBridgeBank", _bridgeBank)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeBank) returns()
func (_QuantiexBridge *QuantiexBridgeSession) SetBridgeBank(_bridgeBank common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.SetBridgeBank(&_QuantiexBridge.TransactOpts, _bridgeBank)
}

// SetBridgeBank is a paid mutator transaction binding the contract method 0x814c92c3.
//
// Solidity: function setBridgeBank(address _bridgeBank) returns()
func (_QuantiexBridge *QuantiexBridgeTransactorSession) SetBridgeBank(_bridgeBank common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.SetBridgeBank(&_QuantiexBridge.TransactOpts, _bridgeBank)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexBridge *QuantiexBridgeTransactor) SetOracle(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.contract.Transact(opts, "setOracle", _oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexBridge *QuantiexBridgeSession) SetOracle(_oracle common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.SetOracle(&_QuantiexBridge.TransactOpts, _oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address _oracle) returns()
func (_QuantiexBridge *QuantiexBridgeTransactorSession) SetOracle(_oracle common.Address) (*types.Transaction, error) {
	return _QuantiexBridge.Contract.SetOracle(&_QuantiexBridge.TransactOpts, _oracle)
}

// QuantiexBridgeLogBridgeBankSetIterator is returned from FilterLogBridgeBankSet and is used to iterate over the raw logs and unpacked data for LogBridgeBankSet events raised by the QuantiexBridge contract.
type QuantiexBridgeLogBridgeBankSetIterator struct {
	Event *QuantiexBridgeLogBridgeBankSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexBridgeLogBridgeBankSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexBridgeLogBridgeBankSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexBridgeLogBridgeBankSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexBridgeLogBridgeBankSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexBridgeLogBridgeBankSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexBridgeLogBridgeBankSet represents a LogBridgeBankSet event raised by the QuantiexBridge contract.
type QuantiexBridgeLogBridgeBankSet struct {
	BridgeBank common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogBridgeBankSet is a free log retrieval operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexBridge *QuantiexBridgeFilterer) FilterLogBridgeBankSet(opts *bind.FilterOpts) (*QuantiexBridgeLogBridgeBankSetIterator, error) {

	logs, sub, err := _QuantiexBridge.contract.FilterLogs(opts, "LogBridgeBankSet")
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeLogBridgeBankSetIterator{contract: _QuantiexBridge.contract, event: "LogBridgeBankSet", logs: logs, sub: sub}, nil
}

// WatchLogBridgeBankSet is a free log subscription operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexBridge *QuantiexBridgeFilterer) WatchLogBridgeBankSet(opts *bind.WatchOpts, sink chan<- *QuantiexBridgeLogBridgeBankSet) (event.Subscription, error) {

	logs, sub, err := _QuantiexBridge.contract.WatchLogs(opts, "LogBridgeBankSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexBridgeLogBridgeBankSet)
				if err := _QuantiexBridge.contract.UnpackLog(event, "LogBridgeBankSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBridgeBankSet is a log parse operation binding the contract event 0xc8b65043fb196ac032b79a435397d1d14a96b4e9d12e366c3b1f550cb01d2dfa.
//
// Solidity: event LogBridgeBankSet(address _bridgeBank)
func (_QuantiexBridge *QuantiexBridgeFilterer) ParseLogBridgeBankSet(log types.Log) (*QuantiexBridgeLogBridgeBankSet, error) {
	event := new(QuantiexBridgeLogBridgeBankSet)
	if err := _QuantiexBridge.contract.UnpackLog(event, "LogBridgeBankSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexBridgeLogNewProphecyClaimIterator is returned from FilterLogNewProphecyClaim and is used to iterate over the raw logs and unpacked data for LogNewProphecyClaim events raised by the QuantiexBridge contract.
type QuantiexBridgeLogNewProphecyClaimIterator struct {
	Event *QuantiexBridgeLogNewProphecyClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexBridgeLogNewProphecyClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexBridgeLogNewProphecyClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexBridgeLogNewProphecyClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexBridgeLogNewProphecyClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexBridgeLogNewProphecyClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexBridgeLogNewProphecyClaim represents a LogNewProphecyClaim event raised by the QuantiexBridge contract.
type QuantiexBridgeLogNewProphecyClaim struct {
	ProphecyID       *big.Int
	ChainName        string
	ClaimType        uint8
	BinanceSender    common.Address
	EthereumReceiver common.Address
	ValidatorAddress common.Address
	TokenAddress     common.Address
	Symbol           string
	Amount           *big.Int
	TxHash           string
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLogNewProphecyClaim is a free log retrieval operation binding the contract event 0x7a19ef4b9cf82f41c09fa0ae0802a4ddd498f6e2bec7bb6d4e523ca655f14b81.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, string _chainName, uint8 _claimType, address _binanceSender, address _ethereumReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _amount, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) FilterLogNewProphecyClaim(opts *bind.FilterOpts) (*QuantiexBridgeLogNewProphecyClaimIterator, error) {

	logs, sub, err := _QuantiexBridge.contract.FilterLogs(opts, "LogNewProphecyClaim")
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeLogNewProphecyClaimIterator{contract: _QuantiexBridge.contract, event: "LogNewProphecyClaim", logs: logs, sub: sub}, nil
}

// WatchLogNewProphecyClaim is a free log subscription operation binding the contract event 0x7a19ef4b9cf82f41c09fa0ae0802a4ddd498f6e2bec7bb6d4e523ca655f14b81.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, string _chainName, uint8 _claimType, address _binanceSender, address _ethereumReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _amount, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) WatchLogNewProphecyClaim(opts *bind.WatchOpts, sink chan<- *QuantiexBridgeLogNewProphecyClaim) (event.Subscription, error) {

	logs, sub, err := _QuantiexBridge.contract.WatchLogs(opts, "LogNewProphecyClaim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexBridgeLogNewProphecyClaim)
				if err := _QuantiexBridge.contract.UnpackLog(event, "LogNewProphecyClaim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewProphecyClaim is a log parse operation binding the contract event 0x7a19ef4b9cf82f41c09fa0ae0802a4ddd498f6e2bec7bb6d4e523ca655f14b81.
//
// Solidity: event LogNewProphecyClaim(uint256 _prophecyID, string _chainName, uint8 _claimType, address _binanceSender, address _ethereumReceiver, address _validatorAddress, address _tokenAddress, string _symbol, uint256 _amount, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) ParseLogNewProphecyClaim(log types.Log) (*QuantiexBridgeLogNewProphecyClaim, error) {
	event := new(QuantiexBridgeLogNewProphecyClaim)
	if err := _QuantiexBridge.contract.UnpackLog(event, "LogNewProphecyClaim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexBridgeLogOracleSetIterator is returned from FilterLogOracleSet and is used to iterate over the raw logs and unpacked data for LogOracleSet events raised by the QuantiexBridge contract.
type QuantiexBridgeLogOracleSetIterator struct {
	Event *QuantiexBridgeLogOracleSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexBridgeLogOracleSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexBridgeLogOracleSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexBridgeLogOracleSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexBridgeLogOracleSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexBridgeLogOracleSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexBridgeLogOracleSet represents a LogOracleSet event raised by the QuantiexBridge contract.
type QuantiexBridgeLogOracleSet struct {
	Oracle common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogOracleSet is a free log retrieval operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexBridge *QuantiexBridgeFilterer) FilterLogOracleSet(opts *bind.FilterOpts) (*QuantiexBridgeLogOracleSetIterator, error) {

	logs, sub, err := _QuantiexBridge.contract.FilterLogs(opts, "LogOracleSet")
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeLogOracleSetIterator{contract: _QuantiexBridge.contract, event: "LogOracleSet", logs: logs, sub: sub}, nil
}

// WatchLogOracleSet is a free log subscription operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexBridge *QuantiexBridgeFilterer) WatchLogOracleSet(opts *bind.WatchOpts, sink chan<- *QuantiexBridgeLogOracleSet) (event.Subscription, error) {

	logs, sub, err := _QuantiexBridge.contract.WatchLogs(opts, "LogOracleSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexBridgeLogOracleSet)
				if err := _QuantiexBridge.contract.UnpackLog(event, "LogOracleSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogOracleSet is a log parse operation binding the contract event 0x6efb0434342713e2e9b1501dbebf76b4ed18406ea77ab5d56535cc26dec3adc0.
//
// Solidity: event LogOracleSet(address _oracle)
func (_QuantiexBridge *QuantiexBridgeFilterer) ParseLogOracleSet(log types.Log) (*QuantiexBridgeLogOracleSet, error) {
	event := new(QuantiexBridgeLogOracleSet)
	if err := _QuantiexBridge.contract.UnpackLog(event, "LogOracleSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// QuantiexBridgeLogProphecyCompletedIterator is returned from FilterLogProphecyCompleted and is used to iterate over the raw logs and unpacked data for LogProphecyCompleted events raised by the QuantiexBridge contract.
type QuantiexBridgeLogProphecyCompletedIterator struct {
	Event *QuantiexBridgeLogProphecyCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *QuantiexBridgeLogProphecyCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(QuantiexBridgeLogProphecyCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(QuantiexBridgeLogProphecyCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *QuantiexBridgeLogProphecyCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *QuantiexBridgeLogProphecyCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// QuantiexBridgeLogProphecyCompleted represents a LogProphecyCompleted event raised by the QuantiexBridge contract.
type QuantiexBridgeLogProphecyCompleted struct {
	ProphecyID *big.Int
	ClaimType  uint8
	TxHash     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogProphecyCompleted is a free log retrieval operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) FilterLogProphecyCompleted(opts *bind.FilterOpts) (*QuantiexBridgeLogProphecyCompletedIterator, error) {

	logs, sub, err := _QuantiexBridge.contract.FilterLogs(opts, "LogProphecyCompleted")
	if err != nil {
		return nil, err
	}
	return &QuantiexBridgeLogProphecyCompletedIterator{contract: _QuantiexBridge.contract, event: "LogProphecyCompleted", logs: logs, sub: sub}, nil
}

// WatchLogProphecyCompleted is a free log subscription operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) WatchLogProphecyCompleted(opts *bind.WatchOpts, sink chan<- *QuantiexBridgeLogProphecyCompleted) (event.Subscription, error) {

	logs, sub, err := _QuantiexBridge.contract.WatchLogs(opts, "LogProphecyCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(QuantiexBridgeLogProphecyCompleted)
				if err := _QuantiexBridge.contract.UnpackLog(event, "LogProphecyCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogProphecyCompleted is a log parse operation binding the contract event 0x768a3e3999fe057fb07847b8af0db84b1fe653c69a924ee554a43e8e12023a56.
//
// Solidity: event LogProphecyCompleted(uint256 _prophecyID, uint8 _claimType, string txHash)
func (_QuantiexBridge *QuantiexBridgeFilterer) ParseLogProphecyCompleted(log types.Log) (*QuantiexBridgeLogProphecyCompleted, error) {
	event := new(QuantiexBridgeLogProphecyCompleted)
	if err := _QuantiexBridge.contract.UnpackLog(event, "LogProphecyCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}
